=begin
#Kill Bill

#Kill Bill is an open-source billing and payments platform

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class SubscriptionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Block a subscription
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BlockingStateJson] :body 
    # @option opts [String] :requested_date 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def add_subscription_blocking_state(subscription_id, opts = {})
      add_subscription_blocking_state_with_http_info(subscription_id, opts)
      return nil
    end

    # Block a subscription
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BlockingStateJson] :body 
    # @option opts [String] :requested_date 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_subscription_blocking_state_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionsApi.add_subscription_blocking_state ..."
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling SubscriptionsApi.add_subscription_blocking_state"
      end
      if @api_client.config.client_side_validation && subscription_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'subscription_id' when calling SubscriptionsApi.add_subscription_blocking_state, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/subscriptions/{subscriptionId}/block".sub('{' + 'subscriptionId' + '}', subscription_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'requestedDate'] = opts[:'requested_date'] if !opts[:'requested_date'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#add_subscription_blocking_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel an entitlement plan
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :requested_date 
    # @option opts [BOOLEAN] :call_completion  (default to false)
    # @option opts [Integer] :call_timeout_sec  (default to 5)
    # @option opts [String] :entitlement_policy 
    # @option opts [String] :billing_policy 
    # @option opts [BOOLEAN] :use_requested_date_for_billing  (default to false)
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def cancel_entitlement_plan(subscription_id, opts = {})
      cancel_entitlement_plan_with_http_info(subscription_id, opts)
      return nil
    end

    # Cancel an entitlement plan
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :requested_date 
    # @option opts [BOOLEAN] :call_completion 
    # @option opts [Integer] :call_timeout_sec 
    # @option opts [String] :entitlement_policy 
    # @option opts [String] :billing_policy 
    # @option opts [BOOLEAN] :use_requested_date_for_billing 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def cancel_entitlement_plan_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionsApi.cancel_entitlement_plan ..."
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling SubscriptionsApi.cancel_entitlement_plan"
      end
      if @api_client.config.client_side_validation && subscription_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'subscription_id' when calling SubscriptionsApi.cancel_entitlement_plan, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/subscriptions/{subscriptionId}".sub('{' + 'subscriptionId' + '}', subscription_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'requestedDate'] = opts[:'requested_date'] if !opts[:'requested_date'].nil?
      query_params[:'callCompletion'] = opts[:'call_completion'] if !opts[:'call_completion'].nil?
      query_params[:'callTimeoutSec'] = opts[:'call_timeout_sec'] if !opts[:'call_timeout_sec'].nil?
      query_params[:'entitlementPolicy'] = opts[:'entitlement_policy'] if !opts[:'entitlement_policy'].nil?
      query_params[:'billingPolicy'] = opts[:'billing_policy'] if !opts[:'billing_policy'].nil?
      query_params[:'useRequestedDateForBilling'] = opts[:'use_requested_date_for_billing'] if !opts[:'use_requested_date_for_billing'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#cancel_entitlement_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change entitlement plan
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [SubscriptionJson] :body 
    # @option opts [String] :requested_date 
    # @option opts [BOOLEAN] :call_completion  (default to false)
    # @option opts [Integer] :call_timeout_sec  (default to 3)
    # @option opts [String] :billing_policy 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def change_entitlement_plan(subscription_id, opts = {})
      change_entitlement_plan_with_http_info(subscription_id, opts)
      return nil
    end

    # Change entitlement plan
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [SubscriptionJson] :body 
    # @option opts [String] :requested_date 
    # @option opts [BOOLEAN] :call_completion 
    # @option opts [Integer] :call_timeout_sec 
    # @option opts [String] :billing_policy 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def change_entitlement_plan_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionsApi.change_entitlement_plan ..."
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling SubscriptionsApi.change_entitlement_plan"
      end
      if @api_client.config.client_side_validation && subscription_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'subscription_id' when calling SubscriptionsApi.change_entitlement_plan, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/subscriptions/{subscriptionId}".sub('{' + 'subscriptionId' + '}', subscription_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'requestedDate'] = opts[:'requested_date'] if !opts[:'requested_date'].nil?
      query_params[:'callCompletion'] = opts[:'call_completion'] if !opts[:'call_completion'].nil?
      query_params[:'callTimeoutSec'] = opts[:'call_timeout_sec'] if !opts[:'call_timeout_sec'].nil?
      query_params[:'billingPolicy'] = opts[:'billing_policy'] if !opts[:'billing_policy'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#change_entitlement_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add custom fields to subscription
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<CustomFieldJson>] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def create_custom_fields(subscription_id, opts = {})
      create_custom_fields_with_http_info(subscription_id, opts)
      return nil
    end

    # Add custom fields to subscription
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<CustomFieldJson>] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_custom_fields_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionsApi.create_custom_fields ..."
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling SubscriptionsApi.create_custom_fields"
      end
      if @api_client.config.client_side_validation && subscription_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'subscription_id' when calling SubscriptionsApi.create_custom_fields, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/subscriptions/{subscriptionId}/customFields".sub('{' + 'subscriptionId' + '}', subscription_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#create_custom_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an entitlement
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [SubscriptionJson] :body 
    # @option opts [String] :requested_date 
    # @option opts [String] :entitlement_date 
    # @option opts [String] :billing_date 
    # @option opts [BOOLEAN] :migrated  (default to false)
    # @option opts [Integer] :bcd 
    # @option opts [BOOLEAN] :call_completion  (default to false)
    # @option opts [Integer] :call_timeout_sec  (default to 3)
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def create_entitlement(opts = {})
      create_entitlement_with_http_info(opts)
      return nil
    end

    # Create an entitlement
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [SubscriptionJson] :body 
    # @option opts [String] :requested_date 
    # @option opts [String] :entitlement_date 
    # @option opts [String] :billing_date 
    # @option opts [BOOLEAN] :migrated 
    # @option opts [Integer] :bcd 
    # @option opts [BOOLEAN] :call_completion 
    # @option opts [Integer] :call_timeout_sec 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_entitlement_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionsApi.create_entitlement ..."
      end
      # resource path
      local_var_path = "/1.0/kb/subscriptions"

      # query parameters
      query_params = {}
      query_params[:'requestedDate'] = opts[:'requested_date'] if !opts[:'requested_date'].nil?
      query_params[:'entitlementDate'] = opts[:'entitlement_date'] if !opts[:'entitlement_date'].nil?
      query_params[:'billingDate'] = opts[:'billing_date'] if !opts[:'billing_date'].nil?
      query_params[:'migrated'] = opts[:'migrated'] if !opts[:'migrated'].nil?
      query_params[:'bcd'] = opts[:'bcd'] if !opts[:'bcd'].nil?
      query_params[:'callCompletion'] = opts[:'call_completion'] if !opts[:'call_completion'].nil?
      query_params[:'callTimeoutSec'] = opts[:'call_timeout_sec'] if !opts[:'call_timeout_sec'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#create_entitlement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an entitlement with addOn products
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<SubscriptionJson>] :body 
    # @option opts [String] :requested_date 
    # @option opts [String] :entitlement_date 
    # @option opts [String] :billing_date 
    # @option opts [BOOLEAN] :migrated  (default to false)
    # @option opts [BOOLEAN] :call_completion  (default to false)
    # @option opts [Integer] :call_timeout_sec  (default to 3)
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def create_entitlement_with_add_ons(opts = {})
      create_entitlement_with_add_ons_with_http_info(opts)
      return nil
    end

    # Create an entitlement with addOn products
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<SubscriptionJson>] :body 
    # @option opts [String] :requested_date 
    # @option opts [String] :entitlement_date 
    # @option opts [String] :billing_date 
    # @option opts [BOOLEAN] :migrated 
    # @option opts [BOOLEAN] :call_completion 
    # @option opts [Integer] :call_timeout_sec 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_entitlement_with_add_ons_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionsApi.create_entitlement_with_add_ons ..."
      end
      # resource path
      local_var_path = "/1.0/kb/subscriptions/createEntitlementWithAddOns"

      # query parameters
      query_params = {}
      query_params[:'requestedDate'] = opts[:'requested_date'] if !opts[:'requested_date'].nil?
      query_params[:'entitlementDate'] = opts[:'entitlement_date'] if !opts[:'entitlement_date'].nil?
      query_params[:'billingDate'] = opts[:'billing_date'] if !opts[:'billing_date'].nil?
      query_params[:'migrated'] = opts[:'migrated'] if !opts[:'migrated'].nil?
      query_params[:'callCompletion'] = opts[:'call_completion'] if !opts[:'call_completion'].nil?
      query_params[:'callTimeoutSec'] = opts[:'call_timeout_sec'] if !opts[:'call_timeout_sec'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#create_entitlement_with_add_ons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create multiple entitlements with addOn products
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<BulkBaseSubscriptionAndAddOnsJson>] :body 
    # @option opts [String] :requested_date 
    # @option opts [String] :entitlement_date 
    # @option opts [String] :billing_date 
    # @option opts [BOOLEAN] :migrated  (default to false)
    # @option opts [BOOLEAN] :call_completion  (default to false)
    # @option opts [Integer] :call_timeout_sec  (default to 3)
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def create_entitlements_with_add_ons(opts = {})
      create_entitlements_with_add_ons_with_http_info(opts)
      return nil
    end

    # Create multiple entitlements with addOn products
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<BulkBaseSubscriptionAndAddOnsJson>] :body 
    # @option opts [String] :requested_date 
    # @option opts [String] :entitlement_date 
    # @option opts [String] :billing_date 
    # @option opts [BOOLEAN] :migrated 
    # @option opts [BOOLEAN] :call_completion 
    # @option opts [Integer] :call_timeout_sec 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_entitlements_with_add_ons_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionsApi.create_entitlements_with_add_ons ..."
      end
      # resource path
      local_var_path = "/1.0/kb/subscriptions/createEntitlementsWithAddOns"

      # query parameters
      query_params = {}
      query_params[:'requestedDate'] = opts[:'requested_date'] if !opts[:'requested_date'].nil?
      query_params[:'entitlementDate'] = opts[:'entitlement_date'] if !opts[:'entitlement_date'].nil?
      query_params[:'billingDate'] = opts[:'billing_date'] if !opts[:'billing_date'].nil?
      query_params[:'migrated'] = opts[:'migrated'] if !opts[:'migrated'].nil?
      query_params[:'callCompletion'] = opts[:'call_completion'] if !opts[:'call_completion'].nil?
      query_params[:'callTimeoutSec'] = opts[:'call_timeout_sec'] if !opts[:'call_timeout_sec'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#create_entitlements_with_add_ons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add tags to subscription
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def create_tags(subscription_id, opts = {})
      create_tags_with_http_info(subscription_id, opts)
      return nil
    end

    # Add tags to subscription
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_tags_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionsApi.create_tags ..."
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling SubscriptionsApi.create_tags"
      end
      if @api_client.config.client_side_validation && subscription_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'subscription_id' when calling SubscriptionsApi.create_tags, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/subscriptions/{subscriptionId}/tags".sub('{' + 'subscriptionId' + '}', subscription_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'tagList'] = opts[:'tag_list'] if !opts[:'tag_list'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#create_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove custom fields from subscription
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :custom_field_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def delete_custom_fields(subscription_id, opts = {})
      delete_custom_fields_with_http_info(subscription_id, opts)
      return nil
    end

    # Remove custom fields from subscription
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :custom_field_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_custom_fields_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionsApi.delete_custom_fields ..."
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling SubscriptionsApi.delete_custom_fields"
      end
      if @api_client.config.client_side_validation && subscription_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'subscription_id' when calling SubscriptionsApi.delete_custom_fields, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/subscriptions/{subscriptionId}/customFields".sub('{' + 'subscriptionId' + '}', subscription_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'customFieldList'] = opts[:'custom_field_list'] if !opts[:'custom_field_list'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#delete_custom_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove tags from subscription
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def delete_tags(subscription_id, opts = {})
      delete_tags_with_http_info(subscription_id, opts)
      return nil
    end

    # Remove tags from subscription
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tags_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionsApi.delete_tags ..."
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling SubscriptionsApi.delete_tags"
      end
      if @api_client.config.client_side_validation && subscription_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'subscription_id' when calling SubscriptionsApi.delete_tags, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/subscriptions/{subscriptionId}/tags".sub('{' + 'subscriptionId' + '}', subscription_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'tagList'] = opts[:'tag_list'] if !opts[:'tag_list'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#delete_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve subscription custom fields
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit  (default to NONE)
    # @return [Array<CustomFieldJson>]
    def get_custom_fields(subscription_id, opts = {})
      data, _status_code, _headers = get_custom_fields_with_http_info(subscription_id, opts)
      return data
    end

    # Retrieve subscription custom fields
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit 
    # @return [Array<(Array<CustomFieldJson>, Fixnum, Hash)>] Array<CustomFieldJson> data, response status code and response headers
    def get_custom_fields_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionsApi.get_custom_fields ..."
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling SubscriptionsApi.get_custom_fields"
      end
      if @api_client.config.client_side_validation && subscription_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'subscription_id' when calling SubscriptionsApi.get_custom_fields, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/subscriptions/{subscriptionId}/customFields".sub('{' + 'subscriptionId' + '}', subscription_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<CustomFieldJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#get_custom_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a subscription by id
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit  (default to NONE)
    # @return [SubscriptionJson]
    def get_entitlement(subscription_id, opts = {})
      data, _status_code, _headers = get_entitlement_with_http_info(subscription_id, opts)
      return data
    end

    # Retrieve a subscription by id
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit 
    # @return [Array<(SubscriptionJson, Fixnum, Hash)>] SubscriptionJson data, response status code and response headers
    def get_entitlement_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionsApi.get_entitlement ..."
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling SubscriptionsApi.get_entitlement"
      end
      if @api_client.config.client_side_validation && subscription_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'subscription_id' when calling SubscriptionsApi.get_entitlement, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/subscriptions/{subscriptionId}".sub('{' + 'subscriptionId' + '}', subscription_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#get_entitlement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve subscription tags
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit  (default to NONE)
    # @option opts [BOOLEAN] :included_deleted  (default to false)
    # @return [Array<TagJson>]
    def get_tags(subscription_id, opts = {})
      data, _status_code, _headers = get_tags_with_http_info(subscription_id, opts)
      return data
    end

    # Retrieve subscription tags
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit 
    # @option opts [BOOLEAN] :included_deleted 
    # @return [Array<(Array<TagJson>, Fixnum, Hash)>] Array<TagJson> data, response status code and response headers
    def get_tags_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionsApi.get_tags ..."
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling SubscriptionsApi.get_tags"
      end
      if @api_client.config.client_side_validation && subscription_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'subscription_id' when calling SubscriptionsApi.get_tags, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/subscriptions/{subscriptionId}/tags".sub('{' + 'subscriptionId' + '}', subscription_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?
      query_params[:'includedDeleted'] = opts[:'included_deleted'] if !opts[:'included_deleted'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TagJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#get_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Un-cancel an entitlement
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def uncancel_entitlement_plan(subscription_id, opts = {})
      uncancel_entitlement_plan_with_http_info(subscription_id, opts)
      return nil
    end

    # Un-cancel an entitlement
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def uncancel_entitlement_plan_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionsApi.uncancel_entitlement_plan ..."
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling SubscriptionsApi.uncancel_entitlement_plan"
      end
      if @api_client.config.client_side_validation && subscription_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'subscription_id' when calling SubscriptionsApi.uncancel_entitlement_plan, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/subscriptions/{subscriptionId}/uncancel".sub('{' + 'subscriptionId' + '}', subscription_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#uncancel_entitlement_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the BCD associated to a subscription
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [SubscriptionJson] :body 
    # @option opts [String] :effective_from_date 
    # @option opts [BOOLEAN] :force_new_bcd_with_past_effective_date  (default to false)
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def update_subscription_bcd(subscription_id, opts = {})
      update_subscription_bcd_with_http_info(subscription_id, opts)
      return nil
    end

    # Update the BCD associated to a subscription
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [SubscriptionJson] :body 
    # @option opts [String] :effective_from_date 
    # @option opts [BOOLEAN] :force_new_bcd_with_past_effective_date 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_subscription_bcd_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscriptionsApi.update_subscription_bcd ..."
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling SubscriptionsApi.update_subscription_bcd"
      end
      if @api_client.config.client_side_validation && subscription_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'subscription_id' when calling SubscriptionsApi.update_subscription_bcd, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/subscriptions/{subscriptionId}/bcd".sub('{' + 'subscriptionId' + '}', subscription_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'effectiveFromDate'] = opts[:'effective_from_date'] if !opts[:'effective_from_date'].nil?
      query_params[:'forceNewBcdWithPastEffectiveDate'] = opts[:'force_new_bcd_with_past_effective_date'] if !opts[:'force_new_bcd_with_past_effective_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#update_subscription_bcd\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
