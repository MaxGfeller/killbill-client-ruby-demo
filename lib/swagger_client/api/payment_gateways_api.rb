=begin
#Kill Bill

#Kill Bill is an open-source billing and payments platform

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class PaymentGatewaysApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Combo API to generate form data to redirect the customer to the gateway
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [ComboHostedPaymentPageJson] :body 
    # @option opts [Array<String>] :control_plugin_name 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [HostedPaymentPageFormDescriptorJson]
    def build_combo_form_descriptor(opts = {})
      data, _status_code, _headers = build_combo_form_descriptor_with_http_info(opts)
      return data
    end

    # Combo API to generate form data to redirect the customer to the gateway
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [ComboHostedPaymentPageJson] :body 
    # @option opts [Array<String>] :control_plugin_name 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(HostedPaymentPageFormDescriptorJson, Fixnum, Hash)>] HostedPaymentPageFormDescriptorJson data, response status code and response headers
    def build_combo_form_descriptor_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentGatewaysApi.build_combo_form_descriptor ..."
      end
      # resource path
      local_var_path = "/1.0/kb/paymentGateways/hosted/form"

      # query parameters
      query_params = {}
      query_params[:'controlPluginName'] = @api_client.build_collection_param(opts[:'control_plugin_name'], :multi) if !opts[:'control_plugin_name'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HostedPaymentPageFormDescriptorJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentGatewaysApi#build_combo_form_descriptor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate form data to redirect the customer to the gateway
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [HostedPaymentPageFieldsJson] :body 
    # @option opts [String] :payment_method_id 
    # @option opts [Array<String>] :control_plugin_name 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [HostedPaymentPageFormDescriptorJson]
    def build_form_descriptor(account_id, opts = {})
      data, _status_code, _headers = build_form_descriptor_with_http_info(account_id, opts)
      return data
    end

    # Generate form data to redirect the customer to the gateway
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [HostedPaymentPageFieldsJson] :body 
    # @option opts [String] :payment_method_id 
    # @option opts [Array<String>] :control_plugin_name 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(HostedPaymentPageFormDescriptorJson, Fixnum, Hash)>] HostedPaymentPageFormDescriptorJson data, response status code and response headers
    def build_form_descriptor_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentGatewaysApi.build_form_descriptor ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling PaymentGatewaysApi.build_form_descriptor"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling PaymentGatewaysApi.build_form_descriptor, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/paymentGateways/hosted/form/{accountId}".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'paymentMethodId'] = opts[:'payment_method_id'] if !opts[:'payment_method_id'].nil?
      query_params[:'controlPluginName'] = @api_client.build_collection_param(opts[:'control_plugin_name'], :multi) if !opts[:'control_plugin_name'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HostedPaymentPageFormDescriptorJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentGatewaysApi#build_form_descriptor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Process a gateway notification
    # The response is built by the appropriate plugin
    # @param plugin_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @option opts [Array<String>] :control_plugin_name 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def process_notification(plugin_name, opts = {})
      process_notification_with_http_info(plugin_name, opts)
      return nil
    end

    # Process a gateway notification
    # The response is built by the appropriate plugin
    # @param plugin_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @option opts [Array<String>] :control_plugin_name 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def process_notification_with_http_info(plugin_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentGatewaysApi.process_notification ..."
      end
      # verify the required parameter 'plugin_name' is set
      if @api_client.config.client_side_validation && plugin_name.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_name' when calling PaymentGatewaysApi.process_notification"
      end
      if @api_client.config.client_side_validation && plugin_name !~ Regexp.new(/.*/)
        fail ArgumentError, "invalid value for 'plugin_name' when calling PaymentGatewaysApi.process_notification, must conform to the pattern /.*/."
      end

      # resource path
      local_var_path = "/1.0/kb/paymentGateways/notification/{pluginName}".sub('{' + 'pluginName' + '}', plugin_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'controlPluginName'] = @api_client.build_collection_param(opts[:'control_plugin_name'], :multi) if !opts[:'control_plugin_name'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentGatewaysApi#process_notification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
