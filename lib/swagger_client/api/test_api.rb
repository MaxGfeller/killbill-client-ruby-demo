=begin
#Kill Bill

#Kill Bill is an open-source billing and payments platform

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class TestApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get the current time
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :time_zone 
    # @return [ClockResource]
    def get_current_time(opts = {})
      data, _status_code, _headers = get_current_time_with_http_info(opts)
      return data
    end

    # Get the current time
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :time_zone 
    # @return [Array<(ClockResource, Fixnum, Hash)>] ClockResource data, response status code and response headers
    def get_current_time_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestApi.get_current_time ..."
      end
      # resource path
      local_var_path = "/1.0/kb/test/clock"

      # query parameters
      query_params = {}
      query_params[:'timeZone'] = opts[:'time_zone'] if !opts[:'time_zone'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClockResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestApi#get_current_time\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the current time
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :requested_date 
    # @option opts [String] :time_zone 
    # @option opts [Integer] :timeout_sec  (default to 5)
    # @return [ClockResource]
    def set_test_clock_time(opts = {})
      data, _status_code, _headers = set_test_clock_time_with_http_info(opts)
      return data
    end

    # Set the current time
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :requested_date 
    # @option opts [String] :time_zone 
    # @option opts [Integer] :timeout_sec 
    # @return [Array<(ClockResource, Fixnum, Hash)>] ClockResource data, response status code and response headers
    def set_test_clock_time_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestApi.set_test_clock_time ..."
      end
      # resource path
      local_var_path = "/1.0/kb/test/clock"

      # query parameters
      query_params = {}
      query_params[:'requestedDate'] = opts[:'requested_date'] if !opts[:'requested_date'].nil?
      query_params[:'timeZone'] = opts[:'time_zone'] if !opts[:'time_zone'].nil?
      query_params[:'timeoutSec'] = opts[:'timeout_sec'] if !opts[:'timeout_sec'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClockResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestApi#set_test_clock_time\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move the current time
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :days 
    # @option opts [Integer] :weeks 
    # @option opts [Integer] :months 
    # @option opts [Integer] :years 
    # @option opts [String] :time_zone 
    # @option opts [Integer] :timeout_sec  (default to 5)
    # @return [ClockResource]
    def update_test_clock_time(opts = {})
      data, _status_code, _headers = update_test_clock_time_with_http_info(opts)
      return data
    end

    # Move the current time
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :days 
    # @option opts [Integer] :weeks 
    # @option opts [Integer] :months 
    # @option opts [Integer] :years 
    # @option opts [String] :time_zone 
    # @option opts [Integer] :timeout_sec 
    # @return [Array<(ClockResource, Fixnum, Hash)>] ClockResource data, response status code and response headers
    def update_test_clock_time_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestApi.update_test_clock_time ..."
      end
      # resource path
      local_var_path = "/1.0/kb/test/clock"

      # query parameters
      query_params = {}
      query_params[:'days'] = opts[:'days'] if !opts[:'days'].nil?
      query_params[:'weeks'] = opts[:'weeks'] if !opts[:'weeks'].nil?
      query_params[:'months'] = opts[:'months'] if !opts[:'months'].nil?
      query_params[:'years'] = opts[:'years'] if !opts[:'years'].nil?
      query_params[:'timeZone'] = opts[:'time_zone'] if !opts[:'time_zone'].nil?
      query_params[:'timeoutSec'] = opts[:'timeout_sec'] if !opts[:'timeout_sec'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClockResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestApi#update_test_clock_time\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Wait for all available bus events and notifications to be processed
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :timeout_sec  (default to 5)
    # @return [nil]
    def wait_for_queues_to_complete(opts = {})
      wait_for_queues_to_complete_with_http_info(opts)
      return nil
    end

    # Wait for all available bus events and notifications to be processed
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :timeout_sec 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def wait_for_queues_to_complete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TestApi.wait_for_queues_to_complete ..."
      end
      # resource path
      local_var_path = "/1.0/kb/test/queues"

      # query parameters
      query_params = {}
      query_params[:'timeoutSec'] = opts[:'timeout_sec'] if !opts[:'timeout_sec'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TestApi#wait_for_queues_to_complete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
