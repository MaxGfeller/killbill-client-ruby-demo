=begin
#Kill Bill

#Kill Bill is an open-source billing and payments platform

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class InvoicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Adjust an invoice item
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [InvoiceItemJson] :body 
    # @option opts [String] :requested_date 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def adjust_invoice_item(invoice_id, opts = {})
      adjust_invoice_item_with_http_info(invoice_id, opts)
      return nil
    end

    # Adjust an invoice item
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [InvoiceItemJson] :body 
    # @option opts [String] :requested_date 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def adjust_invoice_item_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.adjust_invoice_item ..."
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.adjust_invoice_item"
      end
      if @api_client.config.client_side_validation && invoice_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'invoice_id' when calling InvoicesApi.adjust_invoice_item, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/invoices/{invoiceId}".sub('{' + 'invoiceId' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'requestedDate'] = opts[:'requested_date'] if !opts[:'requested_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#adjust_invoice_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Perform the invoice status transition from DRAFT to COMMITTED
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def commit_invoice(invoice_id, opts = {})
      commit_invoice_with_http_info(invoice_id, opts)
      return nil
    end

    # Perform the invoice status transition from DRAFT to COMMITTED
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def commit_invoice_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.commit_invoice ..."
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.commit_invoice"
      end
      if @api_client.config.client_side_validation && invoice_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'invoice_id' when calling InvoicesApi.commit_invoice, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/invoices/{invoiceId}/commitInvoice".sub('{' + 'invoiceId' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#commit_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add custom fields to invoice
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<CustomFieldJson>] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def create_custom_fields(invoice_id, opts = {})
      create_custom_fields_with_http_info(invoice_id, opts)
      return nil
    end

    # Add custom fields to invoice
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<CustomFieldJson>] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_custom_fields_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.create_custom_fields ..."
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.create_custom_fields"
      end
      if @api_client.config.client_side_validation && invoice_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'invoice_id' when calling InvoicesApi.create_custom_fields, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/invoices/{invoiceId}/customFields".sub('{' + 'invoiceId' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#create_custom_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create external charge(s)
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [IterableInvoiceItemJson] :body 
    # @option opts [String] :requested_date 
    # @option opts [BOOLEAN] :pay_invoice  (default to false)
    # @option opts [Array<String>] :plugin_property 
    # @option opts [BOOLEAN] :auto_commit  (default to false)
    # @option opts [String] :payment_external_key 
    # @option opts [String] :transaction_external_key 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<InvoiceItemJson>]
    def create_external_charges(account_id, opts = {})
      data, _status_code, _headers = create_external_charges_with_http_info(account_id, opts)
      return data
    end

    # Create external charge(s)
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [IterableInvoiceItemJson] :body 
    # @option opts [String] :requested_date 
    # @option opts [BOOLEAN] :pay_invoice 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [BOOLEAN] :auto_commit 
    # @option opts [String] :payment_external_key 
    # @option opts [String] :transaction_external_key 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(Array<InvoiceItemJson>, Fixnum, Hash)>] Array<InvoiceItemJson> data, response status code and response headers
    def create_external_charges_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.create_external_charges ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling InvoicesApi.create_external_charges"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling InvoicesApi.create_external_charges, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/invoices/charges/{accountId}".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'requestedDate'] = opts[:'requested_date'] if !opts[:'requested_date'].nil?
      query_params[:'payInvoice'] = opts[:'pay_invoice'] if !opts[:'pay_invoice'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?
      query_params[:'autoCommit'] = opts[:'auto_commit'] if !opts[:'auto_commit'].nil?
      query_params[:'paymentExternalKey'] = opts[:'payment_external_key'] if !opts[:'payment_external_key'].nil?
      query_params[:'transactionExternalKey'] = opts[:'transaction_external_key'] if !opts[:'transaction_external_key'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InvoiceItemJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#create_external_charges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Trigger an invoice generation
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account_id 
    # @option opts [String] :target_date 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [InvoiceJson]
    def create_future_invoice(opts = {})
      data, _status_code, _headers = create_future_invoice_with_http_info(opts)
      return data
    end

    # Trigger an invoice generation
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account_id 
    # @option opts [String] :target_date 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(InvoiceJson, Fixnum, Hash)>] InvoiceJson data, response status code and response headers
    def create_future_invoice_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.create_future_invoice ..."
      end
      # resource path
      local_var_path = "/1.0/kb/invoices"

      # query parameters
      query_params = {}
      query_params[:'accountId'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'targetDate'] = opts[:'target_date'] if !opts[:'target_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoiceJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#create_future_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Trigger a payment for invoice
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [InvoicePaymentJson] :body 
    # @option opts [BOOLEAN] :external_payment  (default to false)
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def create_instant_payment(opts = {})
      create_instant_payment_with_http_info(opts)
      return nil
    end

    # Trigger a payment for invoice
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [InvoicePaymentJson] :body 
    # @option opts [BOOLEAN] :external_payment 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_instant_payment_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.create_instant_payment ..."
      end
      # resource path
      local_var_path = "/1.0/kb/invoices/{invoiceId}/payments"

      # query parameters
      query_params = {}
      query_params[:'externalPayment'] = opts[:'external_payment'] if !opts[:'external_payment'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#create_instant_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a migration invoice
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [IterableInvoiceItemJson] :body 
    # @option opts [String] :target_date 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [InvoiceJson]
    def create_migration_invoice(account_id, opts = {})
      data, _status_code, _headers = create_migration_invoice_with_http_info(account_id, opts)
      return data
    end

    # Create a migration invoice
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [IterableInvoiceItemJson] :body 
    # @option opts [String] :target_date 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(InvoiceJson, Fixnum, Hash)>] InvoiceJson data, response status code and response headers
    def create_migration_invoice_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.create_migration_invoice ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling InvoicesApi.create_migration_invoice"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling InvoicesApi.create_migration_invoice, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/invoices/migration/{accountId}".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'targetDate'] = opts[:'target_date'] if !opts[:'target_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoiceJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#create_migration_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add tags to invoice
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def create_tags(invoice_id, opts = {})
      create_tags_with_http_info(invoice_id, opts)
      return nil
    end

    # Add tags to invoice
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_tags_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.create_tags ..."
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.create_tags"
      end
      if @api_client.config.client_side_validation && invoice_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'invoice_id' when calling InvoicesApi.create_tags, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/invoices/{invoiceId}/tags".sub('{' + 'invoiceId' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'tagList'] = opts[:'tag_list'] if !opts[:'tag_list'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#create_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a CBA item
    # 
    # @param invoice_id 
    # @param invoice_item_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account_id 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def delete_cba(invoice_id, invoice_item_id, opts = {})
      delete_cba_with_http_info(invoice_id, invoice_item_id, opts)
      return nil
    end

    # Delete a CBA item
    # 
    # @param invoice_id 
    # @param invoice_item_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account_id 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_cba_with_http_info(invoice_id, invoice_item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.delete_cba ..."
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.delete_cba"
      end
      if @api_client.config.client_side_validation && invoice_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'invoice_id' when calling InvoicesApi.delete_cba, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # verify the required parameter 'invoice_item_id' is set
      if @api_client.config.client_side_validation && invoice_item_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_item_id' when calling InvoicesApi.delete_cba"
      end
      if @api_client.config.client_side_validation && invoice_item_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'invoice_item_id' when calling InvoicesApi.delete_cba, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/invoices/{invoiceId}/{invoiceItemId}/cba".sub('{' + 'invoiceId' + '}', invoice_id.to_s).sub('{' + 'invoiceItemId' + '}', invoice_item_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accountId'] = opts[:'account_id'] if !opts[:'account_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#delete_cba\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove custom fields from invoice
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :custom_field_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def delete_custom_fields(invoice_id, opts = {})
      delete_custom_fields_with_http_info(invoice_id, opts)
      return nil
    end

    # Remove custom fields from invoice
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :custom_field_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_custom_fields_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.delete_custom_fields ..."
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.delete_custom_fields"
      end
      if @api_client.config.client_side_validation && invoice_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'invoice_id' when calling InvoicesApi.delete_custom_fields, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/invoices/{invoiceId}/customFields".sub('{' + 'invoiceId' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'customFieldList'] = opts[:'custom_field_list'] if !opts[:'custom_field_list'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#delete_custom_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove tags from invoice
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def delete_tags(invoice_id, opts = {})
      delete_tags_with_http_info(invoice_id, opts)
      return nil
    end

    # Remove tags from invoice
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tags_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.delete_tags ..."
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.delete_tags"
      end
      if @api_client.config.client_side_validation && invoice_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'invoice_id' when calling InvoicesApi.delete_tags, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/invoices/{invoiceId}/tags".sub('{' + 'invoiceId' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'tagList'] = opts[:'tag_list'] if !opts[:'tag_list'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#delete_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate a dryRun invoice
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [InvoiceDryRunJson] :body 
    # @option opts [String] :account_id 
    # @option opts [String] :target_date 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [InvoiceJson]
    def generate_dry_run_invoice(opts = {})
      data, _status_code, _headers = generate_dry_run_invoice_with_http_info(opts)
      return data
    end

    # Generate a dryRun invoice
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [InvoiceDryRunJson] :body 
    # @option opts [String] :account_id 
    # @option opts [String] :target_date 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(InvoiceJson, Fixnum, Hash)>] InvoiceJson data, response status code and response headers
    def generate_dry_run_invoice_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.generate_dry_run_invoice ..."
      end
      # resource path
      local_var_path = "/1.0/kb/invoices/dryRun"

      # query parameters
      query_params = {}
      query_params[:'accountId'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'targetDate'] = opts[:'target_date'] if !opts[:'target_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoiceJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#generate_dry_run_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve invoice custom fields
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit  (default to NONE)
    # @return [Array<CustomFieldJson>]
    def get_custom_fields(invoice_id, opts = {})
      data, _status_code, _headers = get_custom_fields_with_http_info(invoice_id, opts)
      return data
    end

    # Retrieve invoice custom fields
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit 
    # @return [Array<(Array<CustomFieldJson>, Fixnum, Hash)>] Array<CustomFieldJson> data, response status code and response headers
    def get_custom_fields_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_custom_fields ..."
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.get_custom_fields"
      end
      if @api_client.config.client_side_validation && invoice_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'invoice_id' when calling InvoicesApi.get_custom_fields, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/invoices/{invoiceId}/customFields".sub('{' + 'invoiceId' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<CustomFieldJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_custom_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an invoice by id
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_items  (default to false)
    # @option opts [BOOLEAN] :with_children_items  (default to false)
    # @option opts [String] :audit  (default to NONE)
    # @return [InvoiceJson]
    def get_invoice(invoice_id, opts = {})
      data, _status_code, _headers = get_invoice_with_http_info(invoice_id, opts)
      return data
    end

    # Retrieve an invoice by id
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_items 
    # @option opts [BOOLEAN] :with_children_items 
    # @option opts [String] :audit 
    # @return [Array<(InvoiceJson, Fixnum, Hash)>] InvoiceJson data, response status code and response headers
    def get_invoice_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_invoice ..."
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.get_invoice"
      end
      if @api_client.config.client_side_validation && invoice_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'invoice_id' when calling InvoicesApi.get_invoice, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/invoices/{invoiceId}".sub('{' + 'invoiceId' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'withItems'] = opts[:'with_items'] if !opts[:'with_items'].nil?
      query_params[:'withChildrenItems'] = opts[:'with_children_items'] if !opts[:'with_children_items'].nil?
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoiceJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Render an invoice as HTML
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_invoice_as_html(invoice_id, opts = {})
      data, _status_code, _headers = get_invoice_as_html_with_http_info(invoice_id, opts)
      return data
    end

    # Render an invoice as HTML
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_invoice_as_html_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_invoice_as_html ..."
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.get_invoice_as_html"
      end
      if @api_client.config.client_side_validation && invoice_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'invoice_id' when calling InvoicesApi.get_invoice_as_html, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/invoices/{invoiceId}/html".sub('{' + 'invoiceId' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_invoice_as_html\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an invoice by number
    # 
    # @param invoice_number 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_items  (default to false)
    # @option opts [BOOLEAN] :with_children_items  (default to false)
    # @option opts [String] :audit  (default to NONE)
    # @return [InvoiceJson]
    def get_invoice_by_number(invoice_number, opts = {})
      data, _status_code, _headers = get_invoice_by_number_with_http_info(invoice_number, opts)
      return data
    end

    # Retrieve an invoice by number
    # 
    # @param invoice_number 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_items 
    # @option opts [BOOLEAN] :with_children_items 
    # @option opts [String] :audit 
    # @return [Array<(InvoiceJson, Fixnum, Hash)>] InvoiceJson data, response status code and response headers
    def get_invoice_by_number_with_http_info(invoice_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_invoice_by_number ..."
      end
      # verify the required parameter 'invoice_number' is set
      if @api_client.config.client_side_validation && invoice_number.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_number' when calling InvoicesApi.get_invoice_by_number"
      end
      if @api_client.config.client_side_validation && invoice_number !~ Regexp.new(/[0-9]+/)
        fail ArgumentError, "invalid value for 'invoice_number' when calling InvoicesApi.get_invoice_by_number, must conform to the pattern /[0-9]+/."
      end

      # resource path
      local_var_path = "/1.0/kb/invoices/{invoiceNumber}".sub('{' + 'invoiceNumber' + '}', invoice_number.to_s)

      # query parameters
      query_params = {}
      query_params[:'withItems'] = opts[:'with_items'] if !opts[:'with_items'].nil?
      query_params[:'withChildrenItems'] = opts[:'with_children_items'] if !opts[:'with_children_items'].nil?
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoiceJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_invoice_by_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List invoices
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset  (default to 0)
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [BOOLEAN] :with_items  (default to false)
    # @option opts [String] :audit  (default to NONE)
    # @return [Array<InvoiceJson>]
    def get_invoices(opts = {})
      data, _status_code, _headers = get_invoices_with_http_info(opts)
      return data
    end

    # List invoices
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset 
    # @option opts [Integer] :limit 
    # @option opts [BOOLEAN] :with_items 
    # @option opts [String] :audit 
    # @return [Array<(Array<InvoiceJson>, Fixnum, Hash)>] Array<InvoiceJson> data, response status code and response headers
    def get_invoices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_invoices ..."
      end
      # resource path
      local_var_path = "/1.0/kb/invoices/pagination"

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'withItems'] = opts[:'with_items'] if !opts[:'with_items'].nil?
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InvoiceJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve payments associated with an invoice
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit  (default to NONE)
    # @option opts [BOOLEAN] :with_plugin_info  (default to false)
    # @option opts [BOOLEAN] :with_attempts  (default to false)
    # @return [Array<InvoicePaymentJson>]
    def get_payments(invoice_id, opts = {})
      data, _status_code, _headers = get_payments_with_http_info(invoice_id, opts)
      return data
    end

    # Retrieve payments associated with an invoice
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit 
    # @option opts [BOOLEAN] :with_plugin_info 
    # @option opts [BOOLEAN] :with_attempts 
    # @return [Array<(Array<InvoicePaymentJson>, Fixnum, Hash)>] Array<InvoicePaymentJson> data, response status code and response headers
    def get_payments_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_payments ..."
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.get_payments"
      end
      if @api_client.config.client_side_validation && invoice_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'invoice_id' when calling InvoicesApi.get_payments, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/invoices/{invoiceId}/payments".sub('{' + 'invoiceId' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?
      query_params[:'withPluginInfo'] = opts[:'with_plugin_info'] if !opts[:'with_plugin_info'].nil?
      query_params[:'withAttempts'] = opts[:'with_attempts'] if !opts[:'with_attempts'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InvoicePaymentJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve invoice tags
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit  (default to NONE)
    # @option opts [BOOLEAN] :included_deleted  (default to false)
    # @return [Array<TagJson>]
    def get_tags(invoice_id, opts = {})
      data, _status_code, _headers = get_tags_with_http_info(invoice_id, opts)
      return data
    end

    # Retrieve invoice tags
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit 
    # @option opts [BOOLEAN] :included_deleted 
    # @return [Array<(Array<TagJson>, Fixnum, Hash)>] Array<TagJson> data, response status code and response headers
    def get_tags_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_tags ..."
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.get_tags"
      end
      if @api_client.config.client_side_validation && invoice_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'invoice_id' when calling InvoicesApi.get_tags, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/invoices/{invoiceId}/tags".sub('{' + 'invoiceId' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?
      query_params[:'includedDeleted'] = opts[:'included_deleted'] if !opts[:'included_deleted'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TagJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search invoices
    # 
    # @param search_key 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset  (default to 0)
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [BOOLEAN] :with_items  (default to false)
    # @option opts [String] :audit  (default to NONE)
    # @return [Array<InvoiceJson>]
    def search_invoices(search_key, opts = {})
      data, _status_code, _headers = search_invoices_with_http_info(search_key, opts)
      return data
    end

    # Search invoices
    # 
    # @param search_key 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset 
    # @option opts [Integer] :limit 
    # @option opts [BOOLEAN] :with_items 
    # @option opts [String] :audit 
    # @return [Array<(Array<InvoiceJson>, Fixnum, Hash)>] Array<InvoiceJson> data, response status code and response headers
    def search_invoices_with_http_info(search_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.search_invoices ..."
      end
      # verify the required parameter 'search_key' is set
      if @api_client.config.client_side_validation && search_key.nil?
        fail ArgumentError, "Missing the required parameter 'search_key' when calling InvoicesApi.search_invoices"
      end
      if @api_client.config.client_side_validation && search_key !~ Regexp.new(/.*/)
        fail ArgumentError, "invalid value for 'search_key' when calling InvoicesApi.search_invoices, must conform to the pattern /.*/."
      end

      # resource path
      local_var_path = "/1.0/kb/invoices/search/{searchKey}".sub('{' + 'searchKey' + '}', search_key.to_s)

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'withItems'] = opts[:'with_items'] if !opts[:'with_items'].nil?
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InvoiceJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#search_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Trigger an email notification for invoice
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def trigger_email_notification_for_invoice(invoice_id, opts = {})
      trigger_email_notification_for_invoice_with_http_info(invoice_id, opts)
      return nil
    end

    # Trigger an email notification for invoice
    # 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def trigger_email_notification_for_invoice_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.trigger_email_notification_for_invoice ..."
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.trigger_email_notification_for_invoice"
      end
      if @api_client.config.client_side_validation && invoice_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'invoice_id' when calling InvoicesApi.trigger_email_notification_for_invoice, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/invoices/{invoiceId}/emailNotifications".sub('{' + 'invoiceId' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#trigger_email_notification_for_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload the catalog translation for the tenant
    # 
    # @param locale 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @option opts [BOOLEAN] :delete_if_exists  (default to false)
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def upload_catalog_translation(locale, opts = {})
      upload_catalog_translation_with_http_info(locale, opts)
      return nil
    end

    # Upload the catalog translation for the tenant
    # 
    # @param locale 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @option opts [BOOLEAN] :delete_if_exists 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def upload_catalog_translation_with_http_info(locale, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.upload_catalog_translation ..."
      end
      # verify the required parameter 'locale' is set
      if @api_client.config.client_side_validation && locale.nil?
        fail ArgumentError, "Missing the required parameter 'locale' when calling InvoicesApi.upload_catalog_translation"
      end
      if @api_client.config.client_side_validation && locale !~ Regexp.new(/.*/)
        fail ArgumentError, "invalid value for 'locale' when calling InvoicesApi.upload_catalog_translation, must conform to the pattern /.*/."
      end

      # resource path
      local_var_path = "/1.0/kb/invoices/catalogTranslation/{locale}".sub('{' + 'locale' + '}', locale.to_s)

      # query parameters
      query_params = {}
      query_params[:'deleteIfExists'] = opts[:'delete_if_exists'] if !opts[:'delete_if_exists'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#upload_catalog_translation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload the manualPay invoice template for the tenant
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @option opts [BOOLEAN] :delete_if_exists  (default to false)
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def upload_invoice_mp_template(opts = {})
      upload_invoice_mp_template_with_http_info(opts)
      return nil
    end

    # Upload the manualPay invoice template for the tenant
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @option opts [BOOLEAN] :delete_if_exists 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def upload_invoice_mp_template_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.upload_invoice_mp_template ..."
      end
      # resource path
      local_var_path = "/1.0/kb/invoices/manualPayTemplate"

      # query parameters
      query_params = {}
      query_params[:'deleteIfExists'] = opts[:'delete_if_exists'] if !opts[:'delete_if_exists'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/html'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#upload_invoice_mp_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload the invoice template for the tenant
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @option opts [BOOLEAN] :delete_if_exists  (default to false)
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def upload_invoice_template(opts = {})
      upload_invoice_template_with_http_info(opts)
      return nil
    end

    # Upload the invoice template for the tenant
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @option opts [BOOLEAN] :delete_if_exists 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def upload_invoice_template_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.upload_invoice_template ..."
      end
      # resource path
      local_var_path = "/1.0/kb/invoices/template"

      # query parameters
      query_params = {}
      query_params[:'deleteIfExists'] = opts[:'delete_if_exists'] if !opts[:'delete_if_exists'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/html'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#upload_invoice_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload the invoice translation for the tenant
    # 
    # @param locale 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @option opts [BOOLEAN] :delete_if_exists  (default to false)
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def upload_invoice_translation(locale, opts = {})
      upload_invoice_translation_with_http_info(locale, opts)
      return nil
    end

    # Upload the invoice translation for the tenant
    # 
    # @param locale 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @option opts [BOOLEAN] :delete_if_exists 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def upload_invoice_translation_with_http_info(locale, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.upload_invoice_translation ..."
      end
      # verify the required parameter 'locale' is set
      if @api_client.config.client_side_validation && locale.nil?
        fail ArgumentError, "Missing the required parameter 'locale' when calling InvoicesApi.upload_invoice_translation"
      end
      if @api_client.config.client_side_validation && locale !~ Regexp.new(/.*/)
        fail ArgumentError, "invalid value for 'locale' when calling InvoicesApi.upload_invoice_translation, must conform to the pattern /.*/."
      end

      # resource path
      local_var_path = "/1.0/kb/invoices/translation/{locale}".sub('{' + 'locale' + '}', locale.to_s)

      # query parameters
      query_params = {}
      query_params[:'deleteIfExists'] = opts[:'delete_if_exists'] if !opts[:'delete_if_exists'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#upload_invoice_translation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
