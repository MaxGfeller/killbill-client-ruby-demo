=begin
#Kill Bill

#Kill Bill is an open-source billing and payments platform

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class PaymentMethodsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Add custom fields to payment method
    # 
    # @param payment_method_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<CustomFieldJson>] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def create_custom_fields(payment_method_id, opts = {})
      create_custom_fields_with_http_info(payment_method_id, opts)
      return nil
    end

    # Add custom fields to payment method
    # 
    # @param payment_method_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<CustomFieldJson>] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_custom_fields_with_http_info(payment_method_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentMethodsApi.create_custom_fields ..."
      end
      # verify the required parameter 'payment_method_id' is set
      if @api_client.config.client_side_validation && payment_method_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_method_id' when calling PaymentMethodsApi.create_custom_fields"
      end
      if @api_client.config.client_side_validation && payment_method_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'payment_method_id' when calling PaymentMethodsApi.create_custom_fields, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/paymentMethods/{paymentMethodId}/customFields".sub('{' + 'paymentMethodId' + '}', payment_method_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentMethodsApi#create_custom_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove custom fields from payment method
    # 
    # @param payment_method_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :custom_field_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def delete_custom_fields(payment_method_id, opts = {})
      delete_custom_fields_with_http_info(payment_method_id, opts)
      return nil
    end

    # Remove custom fields from payment method
    # 
    # @param payment_method_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :custom_field_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_custom_fields_with_http_info(payment_method_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentMethodsApi.delete_custom_fields ..."
      end
      # verify the required parameter 'payment_method_id' is set
      if @api_client.config.client_side_validation && payment_method_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_method_id' when calling PaymentMethodsApi.delete_custom_fields"
      end
      if @api_client.config.client_side_validation && payment_method_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'payment_method_id' when calling PaymentMethodsApi.delete_custom_fields, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/paymentMethods/{paymentMethodId}/customFields".sub('{' + 'paymentMethodId' + '}', payment_method_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'customFieldList'] = opts[:'custom_field_list'] if !opts[:'custom_field_list'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentMethodsApi#delete_custom_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a payment method
    # 
    # @param payment_method_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :delete_default_pm_with_auto_pay_off  (default to false)
    # @option opts [BOOLEAN] :force_default_pm_deletion  (default to false)
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def delete_payment_method(payment_method_id, opts = {})
      delete_payment_method_with_http_info(payment_method_id, opts)
      return nil
    end

    # Delete a payment method
    # 
    # @param payment_method_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :delete_default_pm_with_auto_pay_off 
    # @option opts [BOOLEAN] :force_default_pm_deletion 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_payment_method_with_http_info(payment_method_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentMethodsApi.delete_payment_method ..."
      end
      # verify the required parameter 'payment_method_id' is set
      if @api_client.config.client_side_validation && payment_method_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_method_id' when calling PaymentMethodsApi.delete_payment_method"
      end
      if @api_client.config.client_side_validation && payment_method_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'payment_method_id' when calling PaymentMethodsApi.delete_payment_method, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/paymentMethods/{paymentMethodId}".sub('{' + 'paymentMethodId' + '}', payment_method_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deleteDefaultPmWithAutoPayOff'] = opts[:'delete_default_pm_with_auto_pay_off'] if !opts[:'delete_default_pm_with_auto_pay_off'].nil?
      query_params[:'forceDefaultPmDeletion'] = opts[:'force_default_pm_deletion'] if !opts[:'force_default_pm_deletion'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentMethodsApi#delete_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve payment method custom fields
    # 
    # @param payment_method_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit  (default to NONE)
    # @return [Array<CustomFieldJson>]
    def get_custom_fields(payment_method_id, opts = {})
      data, _status_code, _headers = get_custom_fields_with_http_info(payment_method_id, opts)
      return data
    end

    # Retrieve payment method custom fields
    # 
    # @param payment_method_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit 
    # @return [Array<(Array<CustomFieldJson>, Fixnum, Hash)>] Array<CustomFieldJson> data, response status code and response headers
    def get_custom_fields_with_http_info(payment_method_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentMethodsApi.get_custom_fields ..."
      end
      # verify the required parameter 'payment_method_id' is set
      if @api_client.config.client_side_validation && payment_method_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_method_id' when calling PaymentMethodsApi.get_custom_fields"
      end
      if @api_client.config.client_side_validation && payment_method_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'payment_method_id' when calling PaymentMethodsApi.get_custom_fields, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/paymentMethods/{paymentMethodId}/customFields".sub('{' + 'paymentMethodId' + '}', payment_method_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<CustomFieldJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentMethodsApi#get_custom_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a payment method by id
    # 
    # @param payment_method_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :audit  (default to NONE)
    # @option opts [BOOLEAN] :with_plugin_info  (default to false)
    # @return [PaymentMethodJson]
    def get_payment_method(payment_method_id, opts = {})
      data, _status_code, _headers = get_payment_method_with_http_info(payment_method_id, opts)
      return data
    end

    # Retrieve a payment method by id
    # 
    # @param payment_method_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :audit 
    # @option opts [BOOLEAN] :with_plugin_info 
    # @return [Array<(PaymentMethodJson, Fixnum, Hash)>] PaymentMethodJson data, response status code and response headers
    def get_payment_method_with_http_info(payment_method_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentMethodsApi.get_payment_method ..."
      end
      # verify the required parameter 'payment_method_id' is set
      if @api_client.config.client_side_validation && payment_method_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_method_id' when calling PaymentMethodsApi.get_payment_method"
      end
      if @api_client.config.client_side_validation && payment_method_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'payment_method_id' when calling PaymentMethodsApi.get_payment_method, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/paymentMethods/{paymentMethodId}".sub('{' + 'paymentMethodId' + '}', payment_method_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?
      query_params[:'withPluginInfo'] = opts[:'with_plugin_info'] if !opts[:'with_plugin_info'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentMethodJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentMethodsApi#get_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a payment method by external key
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :external_key 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :audit  (default to NONE)
    # @option opts [BOOLEAN] :with_plugin_info  (default to false)
    # @return [PaymentMethodJson]
    def get_payment_method_by_key(opts = {})
      data, _status_code, _headers = get_payment_method_by_key_with_http_info(opts)
      return data
    end

    # Retrieve a payment method by external key
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :external_key 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :audit 
    # @option opts [BOOLEAN] :with_plugin_info 
    # @return [Array<(PaymentMethodJson, Fixnum, Hash)>] PaymentMethodJson data, response status code and response headers
    def get_payment_method_by_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentMethodsApi.get_payment_method_by_key ..."
      end
      # resource path
      local_var_path = "/1.0/kb/paymentMethods"

      # query parameters
      query_params = {}
      query_params[:'externalKey'] = opts[:'external_key'] if !opts[:'external_key'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?
      query_params[:'withPluginInfo'] = opts[:'with_plugin_info'] if !opts[:'with_plugin_info'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentMethodJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentMethodsApi#get_payment_method_by_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List payment methods
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset  (default to 0)
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [String] :plugin_name 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :audit  (default to NONE)
    # @option opts [BOOLEAN] :with_plugin_info  (default to false)
    # @return [Array<PaymentMethodJson>]
    def get_payment_methods(opts = {})
      data, _status_code, _headers = get_payment_methods_with_http_info(opts)
      return data
    end

    # List payment methods
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset 
    # @option opts [Integer] :limit 
    # @option opts [String] :plugin_name 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :audit 
    # @option opts [BOOLEAN] :with_plugin_info 
    # @return [Array<(Array<PaymentMethodJson>, Fixnum, Hash)>] Array<PaymentMethodJson> data, response status code and response headers
    def get_payment_methods_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentMethodsApi.get_payment_methods ..."
      end
      # resource path
      local_var_path = "/1.0/kb/paymentMethods/pagination"

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'pluginName'] = opts[:'plugin_name'] if !opts[:'plugin_name'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?
      query_params[:'withPluginInfo'] = opts[:'with_plugin_info'] if !opts[:'with_plugin_info'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PaymentMethodJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentMethodsApi#get_payment_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search payment methods
    # 
    # @param search_key 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset  (default to 0)
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [String] :plugin_name 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :audit  (default to NONE)
    # @option opts [BOOLEAN] :with_plugin_info  (default to false)
    # @return [Array<PaymentMethodJson>]
    def search_payment_methods(search_key, opts = {})
      data, _status_code, _headers = search_payment_methods_with_http_info(search_key, opts)
      return data
    end

    # Search payment methods
    # 
    # @param search_key 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset 
    # @option opts [Integer] :limit 
    # @option opts [String] :plugin_name 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :audit 
    # @option opts [BOOLEAN] :with_plugin_info 
    # @return [Array<(Array<PaymentMethodJson>, Fixnum, Hash)>] Array<PaymentMethodJson> data, response status code and response headers
    def search_payment_methods_with_http_info(search_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentMethodsApi.search_payment_methods ..."
      end
      # verify the required parameter 'search_key' is set
      if @api_client.config.client_side_validation && search_key.nil?
        fail ArgumentError, "Missing the required parameter 'search_key' when calling PaymentMethodsApi.search_payment_methods"
      end
      if @api_client.config.client_side_validation && search_key !~ Regexp.new(/.*/)
        fail ArgumentError, "invalid value for 'search_key' when calling PaymentMethodsApi.search_payment_methods, must conform to the pattern /.*/."
      end

      # resource path
      local_var_path = "/1.0/kb/paymentMethods/search/{searchKey}".sub('{' + 'searchKey' + '}', search_key.to_s)

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'pluginName'] = opts[:'plugin_name'] if !opts[:'plugin_name'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?
      query_params[:'withPluginInfo'] = opts[:'with_plugin_info'] if !opts[:'with_plugin_info'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PaymentMethodJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentMethodsApi#search_payment_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
