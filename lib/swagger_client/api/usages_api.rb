=begin
#Kill Bill

#Kill Bill is an open-source billing and payments platform

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class UsagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Retrieve usage for a subscription
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date 
    # @option opts [String] :end_date 
    # @return [RolledUpUsageJson]
    def get_all_usage(subscription_id, opts = {})
      data, _status_code, _headers = get_all_usage_with_http_info(subscription_id, opts)
      return data
    end

    # Retrieve usage for a subscription
    # 
    # @param subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date 
    # @option opts [String] :end_date 
    # @return [Array<(RolledUpUsageJson, Fixnum, Hash)>] RolledUpUsageJson data, response status code and response headers
    def get_all_usage_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsagesApi.get_all_usage ..."
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling UsagesApi.get_all_usage"
      end
      if @api_client.config.client_side_validation && subscription_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'subscription_id' when calling UsagesApi.get_all_usage, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/usages/{subscriptionId}".sub('{' + 'subscriptionId' + '}', subscription_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RolledUpUsageJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsagesApi#get_all_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve usage for a subscription and unit type
    # 
    # @param subscription_id 
    # @param unit_type 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date 
    # @option opts [String] :end_date 
    # @return [RolledUpUsageJson]
    def get_usage(subscription_id, unit_type, opts = {})
      data, _status_code, _headers = get_usage_with_http_info(subscription_id, unit_type, opts)
      return data
    end

    # Retrieve usage for a subscription and unit type
    # 
    # @param subscription_id 
    # @param unit_type 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date 
    # @option opts [String] :end_date 
    # @return [Array<(RolledUpUsageJson, Fixnum, Hash)>] RolledUpUsageJson data, response status code and response headers
    def get_usage_with_http_info(subscription_id, unit_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsagesApi.get_usage ..."
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling UsagesApi.get_usage"
      end
      if @api_client.config.client_side_validation && subscription_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'subscription_id' when calling UsagesApi.get_usage, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # verify the required parameter 'unit_type' is set
      if @api_client.config.client_side_validation && unit_type.nil?
        fail ArgumentError, "Missing the required parameter 'unit_type' when calling UsagesApi.get_usage"
      end
      # resource path
      local_var_path = "/1.0/kb/usages/{subscriptionId}/{unitType}".sub('{' + 'subscriptionId' + '}', subscription_id.to_s).sub('{' + 'unitType' + '}', unit_type.to_s)

      # query parameters
      query_params = {}
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RolledUpUsageJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsagesApi#get_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Record usage for a subscription
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [SubscriptionUsageRecordJson] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def record_usage(opts = {})
      record_usage_with_http_info(opts)
      return nil
    end

    # Record usage for a subscription
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [SubscriptionUsageRecordJson] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def record_usage_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UsagesApi.record_usage ..."
      end
      # resource path
      local_var_path = "/1.0/kb/usages"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsagesApi#record_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
