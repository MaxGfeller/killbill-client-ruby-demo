=begin
#Kill Bill

#Kill Bill is an open-source billing and payments platform

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class BundlesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Block a bundle
    # 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BlockingStateJson] :body 
    # @option opts [String] :requested_date 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def add_bundle_blocking_state(bundle_id, opts = {})
      add_bundle_blocking_state_with_http_info(bundle_id, opts)
      return nil
    end

    # Block a bundle
    # 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BlockingStateJson] :body 
    # @option opts [String] :requested_date 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_bundle_blocking_state_with_http_info(bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BundlesApi.add_bundle_blocking_state ..."
      end
      # verify the required parameter 'bundle_id' is set
      if @api_client.config.client_side_validation && bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'bundle_id' when calling BundlesApi.add_bundle_blocking_state"
      end
      if @api_client.config.client_side_validation && bundle_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'bundle_id' when calling BundlesApi.add_bundle_blocking_state, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/bundles/{bundleId}/block".sub('{' + 'bundleId' + '}', bundle_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'requestedDate'] = opts[:'requested_date'] if !opts[:'requested_date'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundlesApi#add_bundle_blocking_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add custom fields to bundle
    # 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<CustomFieldJson>] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def create_custom_fields(bundle_id, opts = {})
      create_custom_fields_with_http_info(bundle_id, opts)
      return nil
    end

    # Add custom fields to bundle
    # 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<CustomFieldJson>] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_custom_fields_with_http_info(bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BundlesApi.create_custom_fields ..."
      end
      # verify the required parameter 'bundle_id' is set
      if @api_client.config.client_side_validation && bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'bundle_id' when calling BundlesApi.create_custom_fields"
      end
      if @api_client.config.client_side_validation && bundle_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'bundle_id' when calling BundlesApi.create_custom_fields, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/bundles/{bundleId}/customFields".sub('{' + 'bundleId' + '}', bundle_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundlesApi#create_custom_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add tags to bundle
    # 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def create_tags(bundle_id, opts = {})
      create_tags_with_http_info(bundle_id, opts)
      return nil
    end

    # Add tags to bundle
    # 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_tags_with_http_info(bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BundlesApi.create_tags ..."
      end
      # verify the required parameter 'bundle_id' is set
      if @api_client.config.client_side_validation && bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'bundle_id' when calling BundlesApi.create_tags"
      end
      if @api_client.config.client_side_validation && bundle_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'bundle_id' when calling BundlesApi.create_tags, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/bundles/{bundleId}/tags".sub('{' + 'bundleId' + '}', bundle_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'tagList'] = opts[:'tag_list'] if !opts[:'tag_list'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundlesApi#create_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove custom fields from bundle
    # 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :custom_field_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def delete_custom_fields(bundle_id, opts = {})
      delete_custom_fields_with_http_info(bundle_id, opts)
      return nil
    end

    # Remove custom fields from bundle
    # 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :custom_field_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_custom_fields_with_http_info(bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BundlesApi.delete_custom_fields ..."
      end
      # verify the required parameter 'bundle_id' is set
      if @api_client.config.client_side_validation && bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'bundle_id' when calling BundlesApi.delete_custom_fields"
      end
      if @api_client.config.client_side_validation && bundle_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'bundle_id' when calling BundlesApi.delete_custom_fields, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/bundles/{bundleId}/customFields".sub('{' + 'bundleId' + '}', bundle_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'customFieldList'] = opts[:'custom_field_list'] if !opts[:'custom_field_list'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundlesApi#delete_custom_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove tags from bundle
    # 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def delete_tags(bundle_id, opts = {})
      delete_tags_with_http_info(bundle_id, opts)
      return nil
    end

    # Remove tags from bundle
    # 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tags_with_http_info(bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BundlesApi.delete_tags ..."
      end
      # verify the required parameter 'bundle_id' is set
      if @api_client.config.client_side_validation && bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'bundle_id' when calling BundlesApi.delete_tags"
      end
      if @api_client.config.client_side_validation && bundle_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'bundle_id' when calling BundlesApi.delete_tags, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/bundles/{bundleId}/tags".sub('{' + 'bundleId' + '}', bundle_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'tagList'] = opts[:'tag_list'] if !opts[:'tag_list'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundlesApi#delete_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a bundle by id
    # 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit  (default to NONE)
    # @return [BundleJson]
    def get_bundle(bundle_id, opts = {})
      data, _status_code, _headers = get_bundle_with_http_info(bundle_id, opts)
      return data
    end

    # Retrieve a bundle by id
    # 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit 
    # @return [Array<(BundleJson, Fixnum, Hash)>] BundleJson data, response status code and response headers
    def get_bundle_with_http_info(bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BundlesApi.get_bundle ..."
      end
      # verify the required parameter 'bundle_id' is set
      if @api_client.config.client_side_validation && bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'bundle_id' when calling BundlesApi.get_bundle"
      end
      if @api_client.config.client_side_validation && bundle_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'bundle_id' when calling BundlesApi.get_bundle, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/bundles/{bundleId}".sub('{' + 'bundleId' + '}', bundle_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BundleJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundlesApi#get_bundle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a bundle by external key
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :external_key 
    # @option opts [BOOLEAN] :included_deleted  (default to false)
    # @option opts [String] :audit  (default to NONE)
    # @return [BundleJson]
    def get_bundle_by_key(opts = {})
      data, _status_code, _headers = get_bundle_by_key_with_http_info(opts)
      return data
    end

    # Retrieve a bundle by external key
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :external_key 
    # @option opts [BOOLEAN] :included_deleted 
    # @option opts [String] :audit 
    # @return [Array<(BundleJson, Fixnum, Hash)>] BundleJson data, response status code and response headers
    def get_bundle_by_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BundlesApi.get_bundle_by_key ..."
      end
      # resource path
      local_var_path = "/1.0/kb/bundles"

      # query parameters
      query_params = {}
      query_params[:'externalKey'] = opts[:'external_key'] if !opts[:'external_key'].nil?
      query_params[:'includedDeleted'] = opts[:'included_deleted'] if !opts[:'included_deleted'].nil?
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BundleJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundlesApi#get_bundle_by_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List bundles
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset  (default to 0)
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [String] :audit  (default to NONE)
    # @return [Array<BundleJson>]
    def get_bundles(opts = {})
      data, _status_code, _headers = get_bundles_with_http_info(opts)
      return data
    end

    # List bundles
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset 
    # @option opts [Integer] :limit 
    # @option opts [String] :audit 
    # @return [Array<(Array<BundleJson>, Fixnum, Hash)>] Array<BundleJson> data, response status code and response headers
    def get_bundles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BundlesApi.get_bundles ..."
      end
      # resource path
      local_var_path = "/1.0/kb/bundles/pagination"

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BundleJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundlesApi#get_bundles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve bundle custom fields
    # 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit  (default to NONE)
    # @return [Array<CustomFieldJson>]
    def get_custom_fields(bundle_id, opts = {})
      data, _status_code, _headers = get_custom_fields_with_http_info(bundle_id, opts)
      return data
    end

    # Retrieve bundle custom fields
    # 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit 
    # @return [Array<(Array<CustomFieldJson>, Fixnum, Hash)>] Array<CustomFieldJson> data, response status code and response headers
    def get_custom_fields_with_http_info(bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BundlesApi.get_custom_fields ..."
      end
      # verify the required parameter 'bundle_id' is set
      if @api_client.config.client_side_validation && bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'bundle_id' when calling BundlesApi.get_custom_fields"
      end
      if @api_client.config.client_side_validation && bundle_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'bundle_id' when calling BundlesApi.get_custom_fields, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/bundles/{bundleId}/customFields".sub('{' + 'bundleId' + '}', bundle_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<CustomFieldJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundlesApi#get_custom_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve bundle tags
    # 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit  (default to NONE)
    # @option opts [BOOLEAN] :included_deleted  (default to false)
    # @return [Array<TagJson>]
    def get_tags(bundle_id, opts = {})
      data, _status_code, _headers = get_tags_with_http_info(bundle_id, opts)
      return data
    end

    # Retrieve bundle tags
    # 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit 
    # @option opts [BOOLEAN] :included_deleted 
    # @return [Array<(Array<TagJson>, Fixnum, Hash)>] Array<TagJson> data, response status code and response headers
    def get_tags_with_http_info(bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BundlesApi.get_tags ..."
      end
      # verify the required parameter 'bundle_id' is set
      if @api_client.config.client_side_validation && bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'bundle_id' when calling BundlesApi.get_tags"
      end
      if @api_client.config.client_side_validation && bundle_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'bundle_id' when calling BundlesApi.get_tags, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/bundles/{bundleId}/tags".sub('{' + 'bundleId' + '}', bundle_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?
      query_params[:'includedDeleted'] = opts[:'included_deleted'] if !opts[:'included_deleted'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TagJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundlesApi#get_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pause a bundle
    # 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :requested_date 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def pause_bundle(bundle_id, opts = {})
      pause_bundle_with_http_info(bundle_id, opts)
      return nil
    end

    # Pause a bundle
    # 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :requested_date 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def pause_bundle_with_http_info(bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BundlesApi.pause_bundle ..."
      end
      # verify the required parameter 'bundle_id' is set
      if @api_client.config.client_side_validation && bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'bundle_id' when calling BundlesApi.pause_bundle"
      end
      if @api_client.config.client_side_validation && bundle_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'bundle_id' when calling BundlesApi.pause_bundle, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/bundles/{bundleId}/pause".sub('{' + 'bundleId' + '}', bundle_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'requestedDate'] = opts[:'requested_date'] if !opts[:'requested_date'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundlesApi#pause_bundle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resume a bundle
    # 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :requested_date 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def resume_bundle(bundle_id, opts = {})
      resume_bundle_with_http_info(bundle_id, opts)
      return nil
    end

    # Resume a bundle
    # 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :requested_date 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def resume_bundle_with_http_info(bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BundlesApi.resume_bundle ..."
      end
      # verify the required parameter 'bundle_id' is set
      if @api_client.config.client_side_validation && bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'bundle_id' when calling BundlesApi.resume_bundle"
      end
      if @api_client.config.client_side_validation && bundle_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'bundle_id' when calling BundlesApi.resume_bundle, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/bundles/{bundleId}/resume".sub('{' + 'bundleId' + '}', bundle_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'requestedDate'] = opts[:'requested_date'] if !opts[:'requested_date'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundlesApi#resume_bundle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search bundles
    # 
    # @param search_key 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset  (default to 0)
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [String] :audit  (default to NONE)
    # @return [Array<BundleJson>]
    def search_bundles(search_key, opts = {})
      data, _status_code, _headers = search_bundles_with_http_info(search_key, opts)
      return data
    end

    # Search bundles
    # 
    # @param search_key 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset 
    # @option opts [Integer] :limit 
    # @option opts [String] :audit 
    # @return [Array<(Array<BundleJson>, Fixnum, Hash)>] Array<BundleJson> data, response status code and response headers
    def search_bundles_with_http_info(search_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BundlesApi.search_bundles ..."
      end
      # verify the required parameter 'search_key' is set
      if @api_client.config.client_side_validation && search_key.nil?
        fail ArgumentError, "Missing the required parameter 'search_key' when calling BundlesApi.search_bundles"
      end
      if @api_client.config.client_side_validation && search_key !~ Regexp.new(/.*/)
        fail ArgumentError, "invalid value for 'search_key' when calling BundlesApi.search_bundles, must conform to the pattern /.*/."
      end

      # resource path
      local_var_path = "/1.0/kb/bundles/search/{searchKey}".sub('{' + 'searchKey' + '}', search_key.to_s)

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BundleJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundlesApi#search_bundles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Transfer a bundle to another account
    # 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BundleJson] :body 
    # @option opts [String] :requested_date 
    # @option opts [String] :billing_policy  (default to END_OF_TERM)
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def transfer_bundle(bundle_id, opts = {})
      transfer_bundle_with_http_info(bundle_id, opts)
      return nil
    end

    # Transfer a bundle to another account
    # 
    # @param bundle_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BundleJson] :body 
    # @option opts [String] :requested_date 
    # @option opts [String] :billing_policy 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def transfer_bundle_with_http_info(bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BundlesApi.transfer_bundle ..."
      end
      # verify the required parameter 'bundle_id' is set
      if @api_client.config.client_side_validation && bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'bundle_id' when calling BundlesApi.transfer_bundle"
      end
      if @api_client.config.client_side_validation && bundle_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'bundle_id' when calling BundlesApi.transfer_bundle, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/bundles/{bundleId}".sub('{' + 'bundleId' + '}', bundle_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'requestedDate'] = opts[:'requested_date'] if !opts[:'requested_date'].nil?
      query_params[:'billingPolicy'] = opts[:'billing_policy'] if !opts[:'billing_policy'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundlesApi#transfer_bundle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
