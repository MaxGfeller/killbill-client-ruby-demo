=begin
#Kill Bill

#Kill Bill is an open-source billing and payments platform

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class AccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Block an account
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BlockingStateJson] :body 
    # @option opts [String] :requested_date 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def add_account_blocking_state(account_id, opts = {})
      add_account_blocking_state_with_http_info(account_id, opts)
      return nil
    end

    # Block an account
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BlockingStateJson] :body 
    # @option opts [String] :requested_date 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_account_blocking_state_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.add_account_blocking_state ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.add_account_blocking_state"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.add_account_blocking_state, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/block".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'requestedDate'] = opts[:'requested_date'] if !opts[:'requested_date'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#add_account_blocking_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add account email
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [AccountEmailJson] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def add_email(account_id, opts = {})
      add_email_with_http_info(account_id, opts)
      return nil
    end

    # Add account email
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [AccountEmailJson] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_email_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.add_email ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.add_email"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.add_email, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/emails".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#add_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Close account
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cancel_all_subscriptions  (default to false)
    # @option opts [BOOLEAN] :write_off_unpaid_invoices  (default to false)
    # @option opts [BOOLEAN] :item_adjust_unpaid_invoices  (default to false)
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def close_account(account_id, opts = {})
      close_account_with_http_info(account_id, opts)
      return nil
    end

    # Close account
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cancel_all_subscriptions 
    # @option opts [BOOLEAN] :write_off_unpaid_invoices 
    # @option opts [BOOLEAN] :item_adjust_unpaid_invoices 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def close_account_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.close_account ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.close_account"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.close_account, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cancelAllSubscriptions'] = opts[:'cancel_all_subscriptions'] if !opts[:'cancel_all_subscriptions'].nil?
      query_params[:'writeOffUnpaidInvoices'] = opts[:'write_off_unpaid_invoices'] if !opts[:'write_off_unpaid_invoices'].nil?
      query_params[:'itemAdjustUnpaidInvoices'] = opts[:'item_adjust_unpaid_invoices'] if !opts[:'item_adjust_unpaid_invoices'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#close_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create account
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [AccountJson] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def create_account(opts = {})
      create_account_with_http_info(opts)
      return nil
    end

    # Create account
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [AccountJson] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_account_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.create_account ..."
      end
      # resource path
      local_var_path = "/1.0/kb/accounts"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#create_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add custom fields to account
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<CustomFieldJson>] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def create_custom_fields(account_id, opts = {})
      create_custom_fields_with_http_info(account_id, opts)
      return nil
    end

    # Add custom fields to account
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<CustomFieldJson>] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_custom_fields_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.create_custom_fields ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.create_custom_fields"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.create_custom_fields, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/customFields".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#create_custom_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a payment method
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [PaymentMethodJson] :body 
    # @option opts [BOOLEAN] :is_default  (default to false)
    # @option opts [BOOLEAN] :pay_all_unpaid_invoices  (default to false)
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def create_payment_method(account_id, opts = {})
      create_payment_method_with_http_info(account_id, opts)
      return nil
    end

    # Add a payment method
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [PaymentMethodJson] :body 
    # @option opts [BOOLEAN] :is_default 
    # @option opts [BOOLEAN] :pay_all_unpaid_invoices 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_payment_method_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.create_payment_method ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.create_payment_method"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.create_payment_method, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/paymentMethods".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'isDefault'] = opts[:'is_default'] if !opts[:'is_default'].nil?
      query_params[:'payAllUnpaidInvoices'] = opts[:'pay_all_unpaid_invoices'] if !opts[:'pay_all_unpaid_invoices'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#create_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add tags to account
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def create_tags(account_id, opts = {})
      create_tags_with_http_info(account_id, opts)
      return nil
    end

    # Add tags to account
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_tags_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.create_tags ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.create_tags"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.create_tags, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/tags".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'tagList'] = opts[:'tag_list'] if !opts[:'tag_list'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#create_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove custom fields from account
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :custom_field_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def delete_custom_fields(account_id, opts = {})
      delete_custom_fields_with_http_info(account_id, opts)
      return nil
    end

    # Remove custom fields from account
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :custom_field_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_custom_fields_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.delete_custom_fields ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.delete_custom_fields"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.delete_custom_fields, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/customFields".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'customFieldList'] = opts[:'custom_field_list'] if !opts[:'custom_field_list'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#delete_custom_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove tags from account
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def delete_tags(account_id, opts = {})
      delete_tags_with_http_info(account_id, opts)
      return nil
    end

    # Remove tags from account
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag_list 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_tags_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.delete_tags ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.delete_tags"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.delete_tags, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/tags".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'tagList'] = opts[:'tag_list'] if !opts[:'tag_list'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#delete_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an account by id
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :account_with_balance  (default to false)
    # @option opts [BOOLEAN] :account_with_balance_and_cba  (default to false)
    # @option opts [String] :audit  (default to NONE)
    # @return [AccountJson]
    def get_account(account_id, opts = {})
      data, _status_code, _headers = get_account_with_http_info(account_id, opts)
      return data
    end

    # Retrieve an account by id
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :account_with_balance 
    # @option opts [BOOLEAN] :account_with_balance_and_cba 
    # @option opts [String] :audit 
    # @return [Array<(AccountJson, Fixnum, Hash)>] AccountJson data, response status code and response headers
    def get_account_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_account ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_account"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.get_account, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accountWithBalance'] = opts[:'account_with_balance'] if !opts[:'account_with_balance'].nil?
      query_params[:'accountWithBalanceAndCBA'] = opts[:'account_with_balance_and_cba'] if !opts[:'account_with_balance_and_cba'].nil?
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve bundles for account
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :external_key 
    # @option opts [String] :bundles_filter 
    # @option opts [String] :audit  (default to NONE)
    # @return [Array<BundleJson>]
    def get_account_bundles(account_id, opts = {})
      data, _status_code, _headers = get_account_bundles_with_http_info(account_id, opts)
      return data
    end

    # Retrieve bundles for account
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :external_key 
    # @option opts [String] :bundles_filter 
    # @option opts [String] :audit 
    # @return [Array<(Array<BundleJson>, Fixnum, Hash)>] Array<BundleJson> data, response status code and response headers
    def get_account_bundles_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_account_bundles ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_account_bundles"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.get_account_bundles, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/bundles".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'externalKey'] = opts[:'external_key'] if !opts[:'external_key'].nil?
      query_params[:'bundlesFilter'] = opts[:'bundles_filter'] if !opts[:'bundles_filter'].nil?
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BundleJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_account_bundles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an account by external key
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :external_key 
    # @option opts [BOOLEAN] :account_with_balance  (default to false)
    # @option opts [BOOLEAN] :account_with_balance_and_cba  (default to false)
    # @option opts [String] :audit  (default to NONE)
    # @return [AccountJson]
    def get_account_by_key(opts = {})
      data, _status_code, _headers = get_account_by_key_with_http_info(opts)
      return data
    end

    # Retrieve an account by external key
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :external_key 
    # @option opts [BOOLEAN] :account_with_balance 
    # @option opts [BOOLEAN] :account_with_balance_and_cba 
    # @option opts [String] :audit 
    # @return [Array<(AccountJson, Fixnum, Hash)>] AccountJson data, response status code and response headers
    def get_account_by_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_account_by_key ..."
      end
      # resource path
      local_var_path = "/1.0/kb/accounts"

      # query parameters
      query_params = {}
      query_params[:'externalKey'] = opts[:'external_key'] if !opts[:'external_key'].nil?
      query_params[:'accountWithBalance'] = opts[:'account_with_balance'] if !opts[:'account_with_balance'].nil?
      query_params[:'accountWithBalanceAndCBA'] = opts[:'account_with_balance_and_cba'] if !opts[:'account_with_balance_and_cba'].nil?
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_account_by_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve account timeline
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit  (default to NONE)
    # @option opts [BOOLEAN] :parallel  (default to false)
    # @return [AccountTimelineJson]
    def get_account_timeline(account_id, opts = {})
      data, _status_code, _headers = get_account_timeline_with_http_info(account_id, opts)
      return data
    end

    # Retrieve account timeline
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit 
    # @option opts [BOOLEAN] :parallel 
    # @return [Array<(AccountTimelineJson, Fixnum, Hash)>] AccountTimelineJson data, response status code and response headers
    def get_account_timeline_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_account_timeline ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_account_timeline"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.get_account_timeline, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/timeline".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?
      query_params[:'parallel'] = opts[:'parallel'] if !opts[:'parallel'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountTimelineJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_account_timeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List accounts
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset  (default to 0)
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [BOOLEAN] :account_with_balance  (default to false)
    # @option opts [BOOLEAN] :account_with_balance_and_cba  (default to false)
    # @option opts [String] :audit  (default to NONE)
    # @return [Array<AccountJson>]
    def get_accounts(opts = {})
      data, _status_code, _headers = get_accounts_with_http_info(opts)
      return data
    end

    # List accounts
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset 
    # @option opts [Integer] :limit 
    # @option opts [BOOLEAN] :account_with_balance 
    # @option opts [BOOLEAN] :account_with_balance_and_cba 
    # @option opts [String] :audit 
    # @return [Array<(Array<AccountJson>, Fixnum, Hash)>] Array<AccountJson> data, response status code and response headers
    def get_accounts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_accounts ..."
      end
      # resource path
      local_var_path = "/1.0/kb/accounts/pagination"

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'accountWithBalance'] = opts[:'account_with_balance'] if !opts[:'account_with_balance'].nil?
      query_params[:'accountWithBalanceAndCBA'] = opts[:'account_with_balance_and_cba'] if !opts[:'account_with_balance_and_cba'].nil?
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AccountJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve account tags
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :object_type 
    # @option opts [String] :audit  (default to NONE)
    # @option opts [BOOLEAN] :included_deleted  (default to false)
    # @return [Array<TagJson>]
    def get_all_tags(account_id, opts = {})
      data, _status_code, _headers = get_all_tags_with_http_info(account_id, opts)
      return data
    end

    # Retrieve account tags
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :object_type 
    # @option opts [String] :audit 
    # @option opts [BOOLEAN] :included_deleted 
    # @return [Array<(Array<TagJson>, Fixnum, Hash)>] Array<TagJson> data, response status code and response headers
    def get_all_tags_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_all_tags ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_all_tags"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.get_all_tags, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      if @api_client.config.client_side_validation && opts[:'object_type'] && !['ACCOUNT', 'ACCOUNT_EMAIL', 'BLOCKING_STATES', 'BUNDLE', 'CUSTOM_FIELD', 'INVOICE', 'PAYMENT', 'TRANSACTION', 'INVOICE_ITEM', 'INVOICE_PAYMENT', 'SUBSCRIPTION', 'SUBSCRIPTION_EVENT', 'SERVICE_BROADCAST', 'PAYMENT_ATTEMPT', 'PAYMENT_METHOD', 'REFUND', 'TAG', 'TAG_DEFINITION', 'TENANT', 'TENANT_KVS'].include?(opts[:'object_type'])
        fail ArgumentError, 'invalid value for "object_type", must be one of ACCOUNT, ACCOUNT_EMAIL, BLOCKING_STATES, BUNDLE, CUSTOM_FIELD, INVOICE, PAYMENT, TRANSACTION, INVOICE_ITEM, INVOICE_PAYMENT, SUBSCRIPTION, SUBSCRIPTION_EVENT, SERVICE_BROADCAST, PAYMENT_ATTEMPT, PAYMENT_METHOD, REFUND, TAG, TAG_DEFINITION, TENANT, TENANT_KVS'
      end
      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/allTags".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'objectType'] = opts[:'object_type'] if !opts[:'object_type'].nil?
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?
      query_params[:'includedDeleted'] = opts[:'included_deleted'] if !opts[:'included_deleted'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TagJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_all_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve blocking states for account
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :blocking_state_types 
    # @option opts [Array<String>] :blocking_state_svcs 
    # @option opts [String] :audit  (default to NONE)
    # @return [Array<BlockingStateJson>]
    def get_blocking_states(account_id, opts = {})
      data, _status_code, _headers = get_blocking_states_with_http_info(account_id, opts)
      return data
    end

    # Retrieve blocking states for account
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :blocking_state_types 
    # @option opts [Array<String>] :blocking_state_svcs 
    # @option opts [String] :audit 
    # @return [Array<(Array<BlockingStateJson>, Fixnum, Hash)>] Array<BlockingStateJson> data, response status code and response headers
    def get_blocking_states_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_blocking_states ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_blocking_states"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.get_blocking_states, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      if @api_client.config.client_side_validation && opts[:'blocking_state_types'] && !opts[:'blocking_state_types'].all?{|item| ['SUBSCRIPTION', 'SUBSCRIPTION_BUNDLE', 'ACCOUNT'].include?(item)}
        fail ArgumentError, 'invalid value for "blocking_state_types", must include one of SUBSCRIPTION, SUBSCRIPTION_BUNDLE, ACCOUNT'
      end
      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/block".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'blockingStateTypes'] = @api_client.build_collection_param(opts[:'blocking_state_types'], :multi) if !opts[:'blocking_state_types'].nil?
      query_params[:'blockingStateSvcs'] = @api_client.build_collection_param(opts[:'blocking_state_svcs'], :multi) if !opts[:'blocking_state_svcs'].nil?
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BlockingStateJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_blocking_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List children accounts
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :account_with_balance  (default to false)
    # @option opts [BOOLEAN] :account_with_balance_and_cba  (default to false)
    # @option opts [String] :audit  (default to NONE)
    # @return [Array<AccountJson>]
    def get_children_accounts(account_id, opts = {})
      data, _status_code, _headers = get_children_accounts_with_http_info(account_id, opts)
      return data
    end

    # List children accounts
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :account_with_balance 
    # @option opts [BOOLEAN] :account_with_balance_and_cba 
    # @option opts [String] :audit 
    # @return [Array<(Array<AccountJson>, Fixnum, Hash)>] Array<AccountJson> data, response status code and response headers
    def get_children_accounts_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_children_accounts ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_children_accounts"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.get_children_accounts, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/children".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accountWithBalance'] = opts[:'account_with_balance'] if !opts[:'account_with_balance'].nil?
      query_params[:'accountWithBalanceAndCBA'] = opts[:'account_with_balance_and_cba'] if !opts[:'account_with_balance_and_cba'].nil?
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AccountJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_children_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve account custom fields
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit  (default to NONE)
    # @return [Array<CustomFieldJson>]
    def get_custom_fields(account_id, opts = {})
      data, _status_code, _headers = get_custom_fields_with_http_info(account_id, opts)
      return data
    end

    # Retrieve account custom fields
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit 
    # @return [Array<(Array<CustomFieldJson>, Fixnum, Hash)>] Array<CustomFieldJson> data, response status code and response headers
    def get_custom_fields_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_custom_fields ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_custom_fields"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.get_custom_fields, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/customFields".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<CustomFieldJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_custom_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve account email notification
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @return [InvoiceEmailJson]
    def get_email_notifications_for_account(account_id, opts = {})
      data, _status_code, _headers = get_email_notifications_for_account_with_http_info(account_id, opts)
      return data
    end

    # Retrieve account email notification
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvoiceEmailJson, Fixnum, Hash)>] InvoiceEmailJson data, response status code and response headers
    def get_email_notifications_for_account_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_email_notifications_for_account ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_email_notifications_for_account"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.get_email_notifications_for_account, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/emailNotifications".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoiceEmailJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_email_notifications_for_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an account emails
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<AccountEmailJson>]
    def get_emails(account_id, opts = {})
      data, _status_code, _headers = get_emails_with_http_info(account_id, opts)
      return data
    end

    # Retrieve an account emails
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AccountEmailJson>, Fixnum, Hash)>] Array<AccountEmailJson> data, response status code and response headers
    def get_emails_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_emails ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_emails"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.get_emails, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/emails".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AccountEmailJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve account invoice payments
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit  (default to NONE)
    # @option opts [BOOLEAN] :with_plugin_info  (default to false)
    # @option opts [BOOLEAN] :with_attempts  (default to false)
    # @option opts [Array<String>] :plugin_property 
    # @return [Array<InvoicePaymentJson>]
    def get_invoice_payments(account_id, opts = {})
      data, _status_code, _headers = get_invoice_payments_with_http_info(account_id, opts)
      return data
    end

    # Retrieve account invoice payments
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit 
    # @option opts [BOOLEAN] :with_plugin_info 
    # @option opts [BOOLEAN] :with_attempts 
    # @option opts [Array<String>] :plugin_property 
    # @return [Array<(Array<InvoicePaymentJson>, Fixnum, Hash)>] Array<InvoicePaymentJson> data, response status code and response headers
    def get_invoice_payments_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_invoice_payments ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_invoice_payments"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.get_invoice_payments, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/invoicePayments".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?
      query_params[:'withPluginInfo'] = opts[:'with_plugin_info'] if !opts[:'with_plugin_info'].nil?
      query_params[:'withAttempts'] = opts[:'with_attempts'] if !opts[:'with_attempts'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InvoicePaymentJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_invoice_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve account invoices
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_items  (default to false)
    # @option opts [BOOLEAN] :with_migration_invoices  (default to false)
    # @option opts [BOOLEAN] :unpaid_invoices_only  (default to false)
    # @option opts [String] :audit  (default to NONE)
    # @return [InvoiceJson]
    def get_invoices(account_id, opts = {})
      data, _status_code, _headers = get_invoices_with_http_info(account_id, opts)
      return data
    end

    # Retrieve account invoices
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_items 
    # @option opts [BOOLEAN] :with_migration_invoices 
    # @option opts [BOOLEAN] :unpaid_invoices_only 
    # @option opts [String] :audit 
    # @return [Array<(InvoiceJson, Fixnum, Hash)>] InvoiceJson data, response status code and response headers
    def get_invoices_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_invoices ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_invoices"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.get_invoices, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/invoices".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'withItems'] = opts[:'with_items'] if !opts[:'with_items'].nil?
      query_params[:'withMigrationInvoices'] = opts[:'with_migration_invoices'] if !opts[:'with_migration_invoices'].nil?
      query_params[:'unpaidInvoicesOnly'] = opts[:'unpaid_invoices_only'] if !opts[:'unpaid_invoices_only'].nil?
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoiceJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve overdue state for account
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @return [OverdueStateJson]
    def get_overdue_account(account_id, opts = {})
      data, _status_code, _headers = get_overdue_account_with_http_info(account_id, opts)
      return data
    end

    # Retrieve overdue state for account
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OverdueStateJson, Fixnum, Hash)>] OverdueStateJson data, response status code and response headers
    def get_overdue_account_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_overdue_account ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_overdue_account"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.get_overdue_account, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/overdue".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OverdueStateJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_overdue_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve account payment methods
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_plugin_info  (default to false)
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :audit  (default to NONE)
    # @return [Array<PaymentMethodJson>]
    def get_payment_methods(account_id, opts = {})
      data, _status_code, _headers = get_payment_methods_with_http_info(account_id, opts)
      return data
    end

    # Retrieve account payment methods
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :with_plugin_info 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :audit 
    # @return [Array<(Array<PaymentMethodJson>, Fixnum, Hash)>] Array<PaymentMethodJson> data, response status code and response headers
    def get_payment_methods_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_payment_methods ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_payment_methods"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.get_payment_methods, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/paymentMethods".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'withPluginInfo'] = opts[:'with_plugin_info'] if !opts[:'with_plugin_info'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PaymentMethodJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_payment_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve account payments
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit  (default to NONE)
    # @option opts [Array<String>] :plugin_property 
    # @option opts [BOOLEAN] :with_plugin_info  (default to false)
    # @option opts [BOOLEAN] :with_attempts  (default to false)
    # @return [Array<PaymentJson>]
    def get_payments(account_id, opts = {})
      data, _status_code, _headers = get_payments_with_http_info(account_id, opts)
      return data
    end

    # Retrieve account payments
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [BOOLEAN] :with_plugin_info 
    # @option opts [BOOLEAN] :with_attempts 
    # @return [Array<(Array<PaymentJson>, Fixnum, Hash)>] Array<PaymentJson> data, response status code and response headers
    def get_payments_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_payments ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_payments"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.get_payments, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/payments".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?
      query_params[:'withPluginInfo'] = opts[:'with_plugin_info'] if !opts[:'with_plugin_info'].nil?
      query_params[:'withAttempts'] = opts[:'with_attempts'] if !opts[:'with_attempts'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PaymentJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve account tags
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit  (default to NONE)
    # @option opts [BOOLEAN] :included_deleted  (default to false)
    # @return [Array<TagJson>]
    def get_tags(account_id, opts = {})
      data, _status_code, _headers = get_tags_with_http_info(account_id, opts)
      return data
    end

    # Retrieve account tags
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audit 
    # @option opts [BOOLEAN] :included_deleted 
    # @return [Array<(Array<TagJson>, Fixnum, Hash)>] Array<TagJson> data, response status code and response headers
    def get_tags_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_tags ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_tags"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.get_tags, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/tags".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?
      query_params[:'includedDeleted'] = opts[:'included_deleted'] if !opts[:'included_deleted'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TagJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Trigger a payment for all unpaid invoices
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :external_payment  (default to false)
    # @option opts [Float] :payment_amount 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def pay_all_invoices(account_id, opts = {})
      pay_all_invoices_with_http_info(account_id, opts)
      return nil
    end

    # Trigger a payment for all unpaid invoices
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :external_payment 
    # @option opts [Float] :payment_amount 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def pay_all_invoices_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.pay_all_invoices ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.pay_all_invoices"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.pay_all_invoices, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/invoicePayments".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'externalPayment'] = opts[:'external_payment'] if !opts[:'external_payment'].nil?
      query_params[:'paymentAmount'] = opts[:'payment_amount'] if !opts[:'payment_amount'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#pay_all_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Trigger a payment (authorization, purchase or credit)
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [PaymentTransactionJson] :body 
    # @option opts [String] :payment_method_id 
    # @option opts [Array<String>] :control_plugin_name 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def process_payment(account_id, opts = {})
      process_payment_with_http_info(account_id, opts)
      return nil
    end

    # Trigger a payment (authorization, purchase or credit)
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [PaymentTransactionJson] :body 
    # @option opts [String] :payment_method_id 
    # @option opts [Array<String>] :control_plugin_name 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def process_payment_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.process_payment ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.process_payment"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.process_payment, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/payments".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'paymentMethodId'] = opts[:'payment_method_id'] if !opts[:'payment_method_id'].nil?
      query_params[:'controlPluginName'] = @api_client.build_collection_param(opts[:'control_plugin_name'], :multi) if !opts[:'control_plugin_name'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#process_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Trigger a payment using the account external key (authorization, purchase or credit)
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [PaymentTransactionJson] :body 
    # @option opts [String] :external_key 
    # @option opts [String] :payment_method_id 
    # @option opts [Array<String>] :control_plugin_name 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def process_payment_by_external_key(opts = {})
      process_payment_by_external_key_with_http_info(opts)
      return nil
    end

    # Trigger a payment using the account external key (authorization, purchase or credit)
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [PaymentTransactionJson] :body 
    # @option opts [String] :external_key 
    # @option opts [String] :payment_method_id 
    # @option opts [Array<String>] :control_plugin_name 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def process_payment_by_external_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.process_payment_by_external_key ..."
      end
      # resource path
      local_var_path = "/1.0/kb/accounts/payments"

      # query parameters
      query_params = {}
      query_params[:'externalKey'] = opts[:'external_key'] if !opts[:'external_key'].nil?
      query_params[:'paymentMethodId'] = opts[:'payment_method_id'] if !opts[:'payment_method_id'].nil?
      query_params[:'controlPluginName'] = @api_client.build_collection_param(opts[:'control_plugin_name'], :multi) if !opts[:'control_plugin_name'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#process_payment_by_external_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rebalance account CBA
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def rebalance_existing_cba_on_account(account_id, opts = {})
      rebalance_existing_cba_on_account_with_http_info(account_id, opts)
      return nil
    end

    # Rebalance account CBA
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def rebalance_existing_cba_on_account_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.rebalance_existing_cba_on_account ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.rebalance_existing_cba_on_account"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.rebalance_existing_cba_on_account, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/cbaRebalancing".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#rebalance_existing_cba_on_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh account payment methods
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :plugin_name 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def refresh_payment_methods(account_id, opts = {})
      refresh_payment_methods_with_http_info(account_id, opts)
      return nil
    end

    # Refresh account payment methods
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :plugin_name 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def refresh_payment_methods_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.refresh_payment_methods ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.refresh_payment_methods"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.refresh_payment_methods, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/paymentMethods/refresh".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'pluginName'] = opts[:'plugin_name'] if !opts[:'plugin_name'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#refresh_payment_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete email from account
    # 
    # @param account_id 
    # @param email 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def remove_email(account_id, email, opts = {})
      remove_email_with_http_info(account_id, email, opts)
      return nil
    end

    # Delete email from account
    # 
    # @param account_id 
    # @param email 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_email_with_http_info(account_id, email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.remove_email ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.remove_email"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.remove_email, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling AccountsApi.remove_email"
      end
      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/emails/{email}".sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'email' + '}', email.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#remove_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search accounts
    # 
    # @param search_key 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset  (default to 0)
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [BOOLEAN] :account_with_balance  (default to false)
    # @option opts [BOOLEAN] :account_with_balance_and_cba  (default to false)
    # @option opts [String] :audit  (default to NONE)
    # @return [Array<AccountJson>]
    def search_accounts(search_key, opts = {})
      data, _status_code, _headers = search_accounts_with_http_info(search_key, opts)
      return data
    end

    # Search accounts
    # 
    # @param search_key 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset 
    # @option opts [Integer] :limit 
    # @option opts [BOOLEAN] :account_with_balance 
    # @option opts [BOOLEAN] :account_with_balance_and_cba 
    # @option opts [String] :audit 
    # @return [Array<(Array<AccountJson>, Fixnum, Hash)>] Array<AccountJson> data, response status code and response headers
    def search_accounts_with_http_info(search_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.search_accounts ..."
      end
      # verify the required parameter 'search_key' is set
      if @api_client.config.client_side_validation && search_key.nil?
        fail ArgumentError, "Missing the required parameter 'search_key' when calling AccountsApi.search_accounts"
      end
      if @api_client.config.client_side_validation && search_key !~ Regexp.new(/.*/)
        fail ArgumentError, "invalid value for 'search_key' when calling AccountsApi.search_accounts, must conform to the pattern /.*/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/search/{searchKey}".sub('{' + 'searchKey' + '}', search_key.to_s)

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'accountWithBalance'] = opts[:'account_with_balance'] if !opts[:'account_with_balance'].nil?
      query_params[:'accountWithBalanceAndCBA'] = opts[:'account_with_balance_and_cba'] if !opts[:'account_with_balance_and_cba'].nil?
      query_params[:'audit'] = opts[:'audit'] if !opts[:'audit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AccountJson>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#search_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the default payment method
    # 
    # @param account_id 
    # @param payment_method_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :pay_all_unpaid_invoices  (default to false)
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def set_default_payment_method(account_id, payment_method_id, opts = {})
      set_default_payment_method_with_http_info(account_id, payment_method_id, opts)
      return nil
    end

    # Set the default payment method
    # 
    # @param account_id 
    # @param payment_method_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :pay_all_unpaid_invoices 
    # @option opts [Array<String>] :plugin_property 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_default_payment_method_with_http_info(account_id, payment_method_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.set_default_payment_method ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.set_default_payment_method"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.set_default_payment_method, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # verify the required parameter 'payment_method_id' is set
      if @api_client.config.client_side_validation && payment_method_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_method_id' when calling AccountsApi.set_default_payment_method"
      end
      if @api_client.config.client_side_validation && payment_method_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'payment_method_id' when calling AccountsApi.set_default_payment_method, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/paymentMethods/{paymentMethodId}/setDefault".sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'paymentMethodId' + '}', payment_method_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'payAllUnpaidInvoices'] = opts[:'pay_all_unpaid_invoices'] if !opts[:'pay_all_unpaid_invoices'].nil?
      query_params[:'pluginProperty'] = @api_client.build_collection_param(opts[:'plugin_property'], :multi) if !opts[:'plugin_property'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#set_default_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set account email notification
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [InvoiceEmailJson] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def set_email_notifications_for_account(account_id, opts = {})
      set_email_notifications_for_account_with_http_info(account_id, opts)
      return nil
    end

    # Set account email notification
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [InvoiceEmailJson] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_email_notifications_for_account_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.set_email_notifications_for_account ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.set_email_notifications_for_account"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.set_email_notifications_for_account, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}/emailNotifications".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#set_email_notifications_for_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move a given child credit to the parent level
    # 
    # @param child_account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def transfer_child_credit_to_parent(child_account_id, opts = {})
      transfer_child_credit_to_parent_with_http_info(child_account_id, opts)
      return nil
    end

    # Move a given child credit to the parent level
    # 
    # @param child_account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def transfer_child_credit_to_parent_with_http_info(child_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.transfer_child_credit_to_parent ..."
      end
      # verify the required parameter 'child_account_id' is set
      if @api_client.config.client_side_validation && child_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'child_account_id' when calling AccountsApi.transfer_child_credit_to_parent"
      end
      if @api_client.config.client_side_validation && child_account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'child_account_id' when calling AccountsApi.transfer_child_credit_to_parent, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{childAccountId}/transferCredit".sub('{' + 'childAccountId' + '}', child_account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#transfer_child_credit_to_parent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update account
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [AccountJson] :body 
    # @option opts [BOOLEAN] :treat_null_as_reset  (default to false)
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def update_account(account_id, opts = {})
      update_account_with_http_info(account_id, opts)
      return nil
    end

    # Update account
    # 
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [AccountJson] :body 
    # @option opts [BOOLEAN] :treat_null_as_reset 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_account_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.update_account ..."
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.update_account"
      end
      if @api_client.config.client_side_validation && account_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'account_id' when calling AccountsApi.update_account, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/accounts/{accountId}".sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'treatNullAsReset'] = opts[:'treat_null_as_reset'] if !opts[:'treat_null_as_reset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#update_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
