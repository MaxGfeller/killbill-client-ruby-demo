=begin
#Kill Bill

#Kill Bill is an open-source billing and payments platform

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class TenantsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a tenant
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [TenantJson] :body 
    # @option opts [BOOLEAN] :use_global_default  (default to true)
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def create_tenant(opts = {})
      create_tenant_with_http_info(opts)
      return nil
    end

    # Create a tenant
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [TenantJson] :body 
    # @option opts [BOOLEAN] :use_global_default 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_tenant_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TenantsApi.create_tenant ..."
      end
      # resource path
      local_var_path = "/1.0/kb/tenants"

      # query parameters
      query_params = {}
      query_params[:'useGlobalDefault'] = opts[:'use_global_default'] if !opts[:'use_global_default'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantsApi#create_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a per tenant configuration (system properties)
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def delete_per_tenant_configuration(opts = {})
      delete_per_tenant_configuration_with_http_info(opts)
      return nil
    end

    # Delete a per tenant configuration (system properties)
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_per_tenant_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TenantsApi.delete_per_tenant_configuration ..."
      end
      # resource path
      local_var_path = "/1.0/kb/tenants/uploadPerTenantConfig"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantsApi#delete_per_tenant_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a per tenant configuration for a plugin
    # 
    # @param plugin_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def delete_plugin_configuration(plugin_name, opts = {})
      delete_plugin_configuration_with_http_info(plugin_name, opts)
      return nil
    end

    # Delete a per tenant configuration for a plugin
    # 
    # @param plugin_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_plugin_configuration_with_http_info(plugin_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TenantsApi.delete_plugin_configuration ..."
      end
      # verify the required parameter 'plugin_name' is set
      if @api_client.config.client_side_validation && plugin_name.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_name' when calling TenantsApi.delete_plugin_configuration"
      end
      if @api_client.config.client_side_validation && plugin_name !~ Regexp.new(/.*/)
        fail ArgumentError, "invalid value for 'plugin_name' when calling TenantsApi.delete_plugin_configuration, must conform to the pattern /.*/."
      end

      # resource path
      local_var_path = "/1.0/kb/tenants/uploadPluginConfig/{pluginName}".sub('{' + 'pluginName' + '}', plugin_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantsApi#delete_plugin_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a per tenant payment state machine for a plugin
    # 
    # @param plugin_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def delete_plugin_payment_state_machine_config(plugin_name, opts = {})
      delete_plugin_payment_state_machine_config_with_http_info(plugin_name, opts)
      return nil
    end

    # Delete a per tenant payment state machine for a plugin
    # 
    # @param plugin_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_plugin_payment_state_machine_config_with_http_info(plugin_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TenantsApi.delete_plugin_payment_state_machine_config ..."
      end
      # verify the required parameter 'plugin_name' is set
      if @api_client.config.client_side_validation && plugin_name.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_name' when calling TenantsApi.delete_plugin_payment_state_machine_config"
      end
      if @api_client.config.client_side_validation && plugin_name !~ Regexp.new(/.*/)
        fail ArgumentError, "invalid value for 'plugin_name' when calling TenantsApi.delete_plugin_payment_state_machine_config, must conform to the pattern /.*/."
      end

      # resource path
      local_var_path = "/1.0/kb/tenants/uploadPluginPaymentStateMachineConfig/{pluginName}".sub('{' + 'pluginName' + '}', plugin_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantsApi#delete_plugin_payment_state_machine_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a push notification
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def delete_push_notification_callbacks(opts = {})
      delete_push_notification_callbacks_with_http_info(opts)
      return nil
    end

    # Delete a push notification
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_push_notification_callbacks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TenantsApi.delete_push_notification_callbacks ..."
      end
      # resource path
      local_var_path = "/1.0/kb/tenants/registerNotificationCallback"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantsApi#delete_push_notification_callbacks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete  a per tenant user key/value
    # 
    # @param key_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def delete_user_key_value(key_name, opts = {})
      delete_user_key_value_with_http_info(key_name, opts)
      return nil
    end

    # Delete  a per tenant user key/value
    # 
    # @param key_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_user_key_value_with_http_info(key_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TenantsApi.delete_user_key_value ..."
      end
      # verify the required parameter 'key_name' is set
      if @api_client.config.client_side_validation && key_name.nil?
        fail ArgumentError, "Missing the required parameter 'key_name' when calling TenantsApi.delete_user_key_value"
      end
      if @api_client.config.client_side_validation && key_name !~ Regexp.new(/.*/)
        fail ArgumentError, "invalid value for 'key_name' when calling TenantsApi.delete_user_key_value, must conform to the pattern /.*/."
      end

      # resource path
      local_var_path = "/1.0/kb/tenants/userKeyValue/{keyName}".sub('{' + 'keyName' + '}', key_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantsApi#delete_user_key_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a per tenant key value based on key prefix
    # 
    # @param key_prefix 
    # @param [Hash] opts the optional parameters
    # @return [TenantKeyJson]
    def get_all_plugin_configuration(key_prefix, opts = {})
      data, _status_code, _headers = get_all_plugin_configuration_with_http_info(key_prefix, opts)
      return data
    end

    # Retrieve a per tenant key value based on key prefix
    # 
    # @param key_prefix 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TenantKeyJson, Fixnum, Hash)>] TenantKeyJson data, response status code and response headers
    def get_all_plugin_configuration_with_http_info(key_prefix, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TenantsApi.get_all_plugin_configuration ..."
      end
      # verify the required parameter 'key_prefix' is set
      if @api_client.config.client_side_validation && key_prefix.nil?
        fail ArgumentError, "Missing the required parameter 'key_prefix' when calling TenantsApi.get_all_plugin_configuration"
      end
      if @api_client.config.client_side_validation && key_prefix !~ Regexp.new(/.*/)
        fail ArgumentError, "invalid value for 'key_prefix' when calling TenantsApi.get_all_plugin_configuration, must conform to the pattern /.*/."
      end

      # resource path
      local_var_path = "/1.0/kb/tenants/uploadPerTenantConfig/{keyPrefix}/search".sub('{' + 'keyPrefix' + '}', key_prefix.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TenantKeyJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantsApi#get_all_plugin_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a per tenant configuration (system properties)
    # 
    # @param [Hash] opts the optional parameters
    # @return [TenantKeyJson]
    def get_per_tenant_configuration(opts = {})
      data, _status_code, _headers = get_per_tenant_configuration_with_http_info(opts)
      return data
    end

    # Retrieve a per tenant configuration (system properties)
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TenantKeyJson, Fixnum, Hash)>] TenantKeyJson data, response status code and response headers
    def get_per_tenant_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TenantsApi.get_per_tenant_configuration ..."
      end
      # resource path
      local_var_path = "/1.0/kb/tenants/uploadPerTenantConfig"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TenantKeyJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantsApi#get_per_tenant_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a per tenant configuration for a plugin
    # 
    # @param plugin_name 
    # @param [Hash] opts the optional parameters
    # @return [TenantKeyJson]
    def get_plugin_configuration(plugin_name, opts = {})
      data, _status_code, _headers = get_plugin_configuration_with_http_info(plugin_name, opts)
      return data
    end

    # Retrieve a per tenant configuration for a plugin
    # 
    # @param plugin_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TenantKeyJson, Fixnum, Hash)>] TenantKeyJson data, response status code and response headers
    def get_plugin_configuration_with_http_info(plugin_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TenantsApi.get_plugin_configuration ..."
      end
      # verify the required parameter 'plugin_name' is set
      if @api_client.config.client_side_validation && plugin_name.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_name' when calling TenantsApi.get_plugin_configuration"
      end
      if @api_client.config.client_side_validation && plugin_name !~ Regexp.new(/.*/)
        fail ArgumentError, "invalid value for 'plugin_name' when calling TenantsApi.get_plugin_configuration, must conform to the pattern /.*/."
      end

      # resource path
      local_var_path = "/1.0/kb/tenants/uploadPluginConfig/{pluginName}".sub('{' + 'pluginName' + '}', plugin_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TenantKeyJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantsApi#get_plugin_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a per tenant payment state machine for a plugin
    # 
    # @param plugin_name 
    # @param [Hash] opts the optional parameters
    # @return [TenantKeyJson]
    def get_plugin_payment_state_machine_config(plugin_name, opts = {})
      data, _status_code, _headers = get_plugin_payment_state_machine_config_with_http_info(plugin_name, opts)
      return data
    end

    # Retrieve a per tenant payment state machine for a plugin
    # 
    # @param plugin_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TenantKeyJson, Fixnum, Hash)>] TenantKeyJson data, response status code and response headers
    def get_plugin_payment_state_machine_config_with_http_info(plugin_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TenantsApi.get_plugin_payment_state_machine_config ..."
      end
      # verify the required parameter 'plugin_name' is set
      if @api_client.config.client_side_validation && plugin_name.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_name' when calling TenantsApi.get_plugin_payment_state_machine_config"
      end
      if @api_client.config.client_side_validation && plugin_name !~ Regexp.new(/.*/)
        fail ArgumentError, "invalid value for 'plugin_name' when calling TenantsApi.get_plugin_payment_state_machine_config, must conform to the pattern /.*/."
      end

      # resource path
      local_var_path = "/1.0/kb/tenants/uploadPluginPaymentStateMachineConfig/{pluginName}".sub('{' + 'pluginName' + '}', plugin_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TenantKeyJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantsApi#get_plugin_payment_state_machine_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a push notification
    # 
    # @param [Hash] opts the optional parameters
    # @return [TenantKeyJson]
    def get_push_notification_callbacks(opts = {})
      data, _status_code, _headers = get_push_notification_callbacks_with_http_info(opts)
      return data
    end

    # Retrieve a push notification
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TenantKeyJson, Fixnum, Hash)>] TenantKeyJson data, response status code and response headers
    def get_push_notification_callbacks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TenantsApi.get_push_notification_callbacks ..."
      end
      # resource path
      local_var_path = "/1.0/kb/tenants/registerNotificationCallback"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TenantKeyJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantsApi#get_push_notification_callbacks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a tenant by id
    # 
    # @param tenant_id 
    # @param [Hash] opts the optional parameters
    # @return [TenantJson]
    def get_tenant(tenant_id, opts = {})
      data, _status_code, _headers = get_tenant_with_http_info(tenant_id, opts)
      return data
    end

    # Retrieve a tenant by id
    # 
    # @param tenant_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TenantJson, Fixnum, Hash)>] TenantJson data, response status code and response headers
    def get_tenant_with_http_info(tenant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TenantsApi.get_tenant ..."
      end
      # verify the required parameter 'tenant_id' is set
      if @api_client.config.client_side_validation && tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'tenant_id' when calling TenantsApi.get_tenant"
      end
      if @api_client.config.client_side_validation && tenant_id !~ Regexp.new(/\\w+-\\w+-\\w+-\\w+-\\w+/)
        fail ArgumentError, "invalid value for 'tenant_id' when calling TenantsApi.get_tenant, must conform to the pattern /\\w+-\\w+-\\w+-\\w+-\\w+/."
      end

      # resource path
      local_var_path = "/1.0/kb/tenants/{tenantId}".sub('{' + 'tenantId' + '}', tenant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TenantJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantsApi#get_tenant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a tenant by its API key
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key 
    # @return [TenantJson]
    def get_tenant_by_api_key(opts = {})
      data, _status_code, _headers = get_tenant_by_api_key_with_http_info(opts)
      return data
    end

    # Retrieve a tenant by its API key
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key 
    # @return [Array<(TenantJson, Fixnum, Hash)>] TenantJson data, response status code and response headers
    def get_tenant_by_api_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TenantsApi.get_tenant_by_api_key ..."
      end
      # resource path
      local_var_path = "/1.0/kb/tenants"

      # query parameters
      query_params = {}
      query_params[:'apiKey'] = opts[:'api_key'] if !opts[:'api_key'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TenantJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantsApi#get_tenant_by_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a per tenant user key/value
    # 
    # @param key_name 
    # @param [Hash] opts the optional parameters
    # @return [TenantKeyJson]
    def get_user_key_value(key_name, opts = {})
      data, _status_code, _headers = get_user_key_value_with_http_info(key_name, opts)
      return data
    end

    # Retrieve a per tenant user key/value
    # 
    # @param key_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TenantKeyJson, Fixnum, Hash)>] TenantKeyJson data, response status code and response headers
    def get_user_key_value_with_http_info(key_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TenantsApi.get_user_key_value ..."
      end
      # verify the required parameter 'key_name' is set
      if @api_client.config.client_side_validation && key_name.nil?
        fail ArgumentError, "Missing the required parameter 'key_name' when calling TenantsApi.get_user_key_value"
      end
      if @api_client.config.client_side_validation && key_name !~ Regexp.new(/.*/)
        fail ArgumentError, "invalid value for 'key_name' when calling TenantsApi.get_user_key_value, must conform to the pattern /.*/."
      end

      # resource path
      local_var_path = "/1.0/kb/tenants/userKeyValue/{keyName}".sub('{' + 'keyName' + '}', key_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TenantKeyJson')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantsApi#get_user_key_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a per tenant user key/value
    # 
    # @param key_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def insert_user_key_value(key_name, opts = {})
      insert_user_key_value_with_http_info(key_name, opts)
      return nil
    end

    # Add a per tenant user key/value
    # 
    # @param key_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def insert_user_key_value_with_http_info(key_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TenantsApi.insert_user_key_value ..."
      end
      # verify the required parameter 'key_name' is set
      if @api_client.config.client_side_validation && key_name.nil?
        fail ArgumentError, "Missing the required parameter 'key_name' when calling TenantsApi.insert_user_key_value"
      end
      if @api_client.config.client_side_validation && key_name !~ Regexp.new(/.*/)
        fail ArgumentError, "invalid value for 'key_name' when calling TenantsApi.insert_user_key_value, must conform to the pattern /.*/."
      end

      # resource path
      local_var_path = "/1.0/kb/tenants/userKeyValue/{keyName}".sub('{' + 'keyName' + '}', key_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantsApi#insert_user_key_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a push notification
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cb 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def register_push_notification_callback(opts = {})
      register_push_notification_callback_with_http_info(opts)
      return nil
    end

    # Create a push notification
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cb 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def register_push_notification_callback_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TenantsApi.register_push_notification_callback ..."
      end
      # resource path
      local_var_path = "/1.0/kb/tenants/registerNotificationCallback"

      # query parameters
      query_params = {}
      query_params[:'cb'] = opts[:'cb'] if !opts[:'cb'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantsApi#register_push_notification_callback\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a per tenant configuration (system properties)
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def upload_per_tenant_configuration(opts = {})
      upload_per_tenant_configuration_with_http_info(opts)
      return nil
    end

    # Add a per tenant configuration (system properties)
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def upload_per_tenant_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TenantsApi.upload_per_tenant_configuration ..."
      end
      # resource path
      local_var_path = "/1.0/kb/tenants/uploadPerTenantConfig"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantsApi#upload_per_tenant_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a per tenant configuration for a plugin
    # 
    # @param plugin_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def upload_plugin_configuration(plugin_name, opts = {})
      upload_plugin_configuration_with_http_info(plugin_name, opts)
      return nil
    end

    # Add a per tenant configuration for a plugin
    # 
    # @param plugin_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def upload_plugin_configuration_with_http_info(plugin_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TenantsApi.upload_plugin_configuration ..."
      end
      # verify the required parameter 'plugin_name' is set
      if @api_client.config.client_side_validation && plugin_name.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_name' when calling TenantsApi.upload_plugin_configuration"
      end
      if @api_client.config.client_side_validation && plugin_name !~ Regexp.new(/.*/)
        fail ArgumentError, "invalid value for 'plugin_name' when calling TenantsApi.upload_plugin_configuration, must conform to the pattern /.*/."
      end

      # resource path
      local_var_path = "/1.0/kb/tenants/uploadPluginConfig/{pluginName}".sub('{' + 'pluginName' + '}', plugin_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantsApi#upload_plugin_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a per tenant payment state machine for a plugin
    # 
    # @param plugin_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [nil]
    def upload_plugin_payment_state_machine_config(plugin_name, opts = {})
      upload_plugin_payment_state_machine_config_with_http_info(plugin_name, opts)
      return nil
    end

    # Add a per tenant payment state machine for a plugin
    # 
    # @param plugin_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @option opts [String] :x_killbill_created_by 
    # @option opts [String] :x_killbill_reason 
    # @option opts [String] :x_killbill_comment 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def upload_plugin_payment_state_machine_config_with_http_info(plugin_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TenantsApi.upload_plugin_payment_state_machine_config ..."
      end
      # verify the required parameter 'plugin_name' is set
      if @api_client.config.client_side_validation && plugin_name.nil?
        fail ArgumentError, "Missing the required parameter 'plugin_name' when calling TenantsApi.upload_plugin_payment_state_machine_config"
      end
      if @api_client.config.client_side_validation && plugin_name !~ Regexp.new(/.*/)
        fail ArgumentError, "invalid value for 'plugin_name' when calling TenantsApi.upload_plugin_payment_state_machine_config, must conform to the pattern /.*/."
      end

      # resource path
      local_var_path = "/1.0/kb/tenants/uploadPluginPaymentStateMachineConfig/{pluginName}".sub('{' + 'pluginName' + '}', plugin_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])
      header_params[:'X-Killbill-CreatedBy'] = opts[:'x_killbill_created_by'] if !opts[:'x_killbill_created_by'].nil?
      header_params[:'X-Killbill-Reason'] = opts[:'x_killbill_reason'] if !opts[:'x_killbill_reason'].nil?
      header_params[:'X-Killbill-Comment'] = opts[:'x_killbill_comment'] if !opts[:'x_killbill_comment'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TenantsApi#upload_plugin_payment_state_machine_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
