=begin
#Kill Bill

#Kill Bill is an open-source billing and payments platform

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module SwaggerClient

  class InvoiceDryRunJson
    attr_accessor :dry_run_type

    attr_accessor :dry_run_action

    attr_accessor :phase_type

    attr_accessor :product_name

    attr_accessor :product_category

    attr_accessor :billing_period

    attr_accessor :price_list_name

    attr_accessor :subscription_id

    attr_accessor :bundle_id

    attr_accessor :effective_date

    attr_accessor :billing_policy

    attr_accessor :price_overrides


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'dry_run_type' => :'dryRunType',
        :'dry_run_action' => :'dryRunAction',
        :'phase_type' => :'phaseType',
        :'product_name' => :'productName',
        :'product_category' => :'productCategory',
        :'billing_period' => :'billingPeriod',
        :'price_list_name' => :'priceListName',
        :'subscription_id' => :'subscriptionId',
        :'bundle_id' => :'bundleId',
        :'effective_date' => :'effectiveDate',
        :'billing_policy' => :'billingPolicy',
        :'price_overrides' => :'priceOverrides'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'dry_run_type' => :'String',
        :'dry_run_action' => :'String',
        :'phase_type' => :'String',
        :'product_name' => :'String',
        :'product_category' => :'String',
        :'billing_period' => :'String',
        :'price_list_name' => :'String',
        :'subscription_id' => :'String',
        :'bundle_id' => :'String',
        :'effective_date' => :'Date',
        :'billing_policy' => :'String',
        :'price_overrides' => :'Array<PhasePriceOverrideJson>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'dryRunType')
        self.dry_run_type = attributes[:'dryRunType']
      end

      if attributes.has_key?(:'dryRunAction')
        self.dry_run_action = attributes[:'dryRunAction']
      end

      if attributes.has_key?(:'phaseType')
        self.phase_type = attributes[:'phaseType']
      end

      if attributes.has_key?(:'productName')
        self.product_name = attributes[:'productName']
      end

      if attributes.has_key?(:'productCategory')
        self.product_category = attributes[:'productCategory']
      end

      if attributes.has_key?(:'billingPeriod')
        self.billing_period = attributes[:'billingPeriod']
      end

      if attributes.has_key?(:'priceListName')
        self.price_list_name = attributes[:'priceListName']
      end

      if attributes.has_key?(:'subscriptionId')
        self.subscription_id = attributes[:'subscriptionId']
      end

      if attributes.has_key?(:'bundleId')
        self.bundle_id = attributes[:'bundleId']
      end

      if attributes.has_key?(:'effectiveDate')
        self.effective_date = attributes[:'effectiveDate']
      end

      if attributes.has_key?(:'billingPolicy')
        self.billing_policy = attributes[:'billingPolicy']
      end

      if attributes.has_key?(:'priceOverrides')
        if (value = attributes[:'priceOverrides']).is_a?(Array)
          self.price_overrides = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          dry_run_type == o.dry_run_type &&
          dry_run_action == o.dry_run_action &&
          phase_type == o.phase_type &&
          product_name == o.product_name &&
          product_category == o.product_category &&
          billing_period == o.billing_period &&
          price_list_name == o.price_list_name &&
          subscription_id == o.subscription_id &&
          bundle_id == o.bundle_id &&
          effective_date == o.effective_date &&
          billing_policy == o.billing_policy &&
          price_overrides == o.price_overrides
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [dry_run_type, dry_run_action, phase_type, product_name, product_category, billing_period, price_list_name, subscription_id, bundle_id, effective_date, billing_policy, price_overrides].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
