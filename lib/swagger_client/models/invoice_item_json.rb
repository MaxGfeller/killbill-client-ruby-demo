=begin
#Kill Bill

#Kill Bill is an open-source billing and payments platform

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module SwaggerClient

  class InvoiceItemJson
    attr_accessor :invoice_item_id

    attr_accessor :invoice_id

    attr_accessor :linked_invoice_item_id

    attr_accessor :account_id

    attr_accessor :child_account_id

    attr_accessor :bundle_id

    attr_accessor :subscription_id

    attr_accessor :plan_name

    attr_accessor :phase_name

    attr_accessor :usage_name

    attr_accessor :item_type

    attr_accessor :description

    attr_accessor :start_date

    attr_accessor :end_date

    attr_accessor :amount

    attr_accessor :currency

    attr_accessor :child_items

    attr_accessor :audit_logs


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'invoice_item_id' => :'invoiceItemId',
        :'invoice_id' => :'invoiceId',
        :'linked_invoice_item_id' => :'linkedInvoiceItemId',
        :'account_id' => :'accountId',
        :'child_account_id' => :'childAccountId',
        :'bundle_id' => :'bundleId',
        :'subscription_id' => :'subscriptionId',
        :'plan_name' => :'planName',
        :'phase_name' => :'phaseName',
        :'usage_name' => :'usageName',
        :'item_type' => :'itemType',
        :'description' => :'description',
        :'start_date' => :'startDate',
        :'end_date' => :'endDate',
        :'amount' => :'amount',
        :'currency' => :'currency',
        :'child_items' => :'childItems',
        :'audit_logs' => :'auditLogs'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'invoice_item_id' => :'String',
        :'invoice_id' => :'String',
        :'linked_invoice_item_id' => :'String',
        :'account_id' => :'String',
        :'child_account_id' => :'String',
        :'bundle_id' => :'String',
        :'subscription_id' => :'String',
        :'plan_name' => :'String',
        :'phase_name' => :'String',
        :'usage_name' => :'String',
        :'item_type' => :'String',
        :'description' => :'String',
        :'start_date' => :'Date',
        :'end_date' => :'Date',
        :'amount' => :'Float',
        :'currency' => :'String',
        :'child_items' => :'Array<InvoiceItemJson>',
        :'audit_logs' => :'Array<AuditLogJson>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'invoiceItemId')
        self.invoice_item_id = attributes[:'invoiceItemId']
      end

      if attributes.has_key?(:'invoiceId')
        self.invoice_id = attributes[:'invoiceId']
      end

      if attributes.has_key?(:'linkedInvoiceItemId')
        self.linked_invoice_item_id = attributes[:'linkedInvoiceItemId']
      end

      if attributes.has_key?(:'accountId')
        self.account_id = attributes[:'accountId']
      end

      if attributes.has_key?(:'childAccountId')
        self.child_account_id = attributes[:'childAccountId']
      end

      if attributes.has_key?(:'bundleId')
        self.bundle_id = attributes[:'bundleId']
      end

      if attributes.has_key?(:'subscriptionId')
        self.subscription_id = attributes[:'subscriptionId']
      end

      if attributes.has_key?(:'planName')
        self.plan_name = attributes[:'planName']
      end

      if attributes.has_key?(:'phaseName')
        self.phase_name = attributes[:'phaseName']
      end

      if attributes.has_key?(:'usageName')
        self.usage_name = attributes[:'usageName']
      end

      if attributes.has_key?(:'itemType')
        self.item_type = attributes[:'itemType']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'startDate')
        self.start_date = attributes[:'startDate']
      end

      if attributes.has_key?(:'endDate')
        self.end_date = attributes[:'endDate']
      end

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.has_key?(:'childItems')
        if (value = attributes[:'childItems']).is_a?(Array)
          self.child_items = value
        end
      end

      if attributes.has_key?(:'auditLogs')
        if (value = attributes[:'auditLogs']).is_a?(Array)
          self.audit_logs = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @invoice_item_id.nil?
        invalid_properties.push("invalid value for 'invoice_item_id', invoice_item_id cannot be nil.")
      end

      if @account_id.nil?
        invalid_properties.push("invalid value for 'account_id', account_id cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @invoice_item_id.nil?
      return false if @account_id.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          invoice_item_id == o.invoice_item_id &&
          invoice_id == o.invoice_id &&
          linked_invoice_item_id == o.linked_invoice_item_id &&
          account_id == o.account_id &&
          child_account_id == o.child_account_id &&
          bundle_id == o.bundle_id &&
          subscription_id == o.subscription_id &&
          plan_name == o.plan_name &&
          phase_name == o.phase_name &&
          usage_name == o.usage_name &&
          item_type == o.item_type &&
          description == o.description &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          amount == o.amount &&
          currency == o.currency &&
          child_items == o.child_items &&
          audit_logs == o.audit_logs
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [invoice_item_id, invoice_id, linked_invoice_item_id, account_id, child_account_id, bundle_id, subscription_id, plan_name, phase_name, usage_name, item_type, description, start_date, end_date, amount, currency, child_items, audit_logs].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
